<alloy builddate="2018-04-08T17:20:06.754Z">

<instance bitwidth="4" maxseq="4" mintrace="-1" maxtrace="-1" command="Check Default_Lateral_Mode_Is_ROLL for 11 Snapshot, exactly 2 EventLabel" filename="/media/jis/TOSHIBA EXT/JIS/Estudio/UWaterloo/Research/Git/dash/Models/Optimisations/optimised/generated_optimised.als" tracelength="1" backloop="0">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="boolean/True" ID="4" parentID="5" one="yes">
   <atom label="boolean/True$0"/>
</sig>

<sig label="boolean/False" ID="6" parentID="5" one="yes">
   <atom label="boolean/False$0"/>
</sig>

<sig label="boolean/Bool" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="steps/Step" ID="7" parentID="2" one="yes">
   <atom label="steps/Step$0"/>
</sig>

<field label="initial" ID="8" parentID="7">
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$0"/> </tuple>
   <types> <type ID="7"/> <type ID="9"/> </types>
</field>

<field label="next_step" ID="10" parentID="7">
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$0"/> <atom label="Snapshot$1"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$1"/> <atom label="Snapshot$2"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$2"/> <atom label="Snapshot$3"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$3"/> <atom label="Snapshot$4"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$4"/> <atom label="Snapshot$5"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$5"/> <atom label="Snapshot$6"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$6"/> <atom label="Snapshot$7"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$7"/> <atom label="Snapshot$8"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$8"/> <atom label="Snapshot$9"/> </tuple>
   <tuple> <atom label="steps/Step$0"/> <atom label="Snapshot$9"/> <atom label="Snapshot$10"/> </tuple>
   <types> <type ID="7"/> <type ID="9"/> <type ID="9"/> </types>
</field>

<field label="equality" ID="11" parentID="7">
   <types> <type ID="7"/> <type ID="9"/> <type ID="9"/> </types>
</field>

<sig label="this/Snapshot" ID="12" parentID="9">
   <atom label="Snapshot$0"/>
   <atom label="Snapshot$1"/>
   <atom label="Snapshot$2"/>
   <atom label="Snapshot$3"/>
   <atom label="Snapshot$4"/>
   <atom label="Snapshot$5"/>
   <atom label="Snapshot$6"/>
   <atom label="Snapshot$7"/>
   <atom label="Snapshot$8"/>
   <atom label="Snapshot$9"/>
   <atom label="Snapshot$10"/>
</sig>

<field label="stable" ID="13" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="events" ID="14" parentID="12">
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_New_Lateral_Mode_Activated$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_New_Lateral_Mode_Activated$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_New_Lateral_Mode_Activated$0"/> </tuple>
   <types> <type ID="9"/> <type ID="15"/> </types>
</field>

<field label="FlightModes_Active_Side" ID="16" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_FD_On" ID="17" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALTSEL_Selected" ID="18" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Is_AP_Engaged" ID="19" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VS_Pitch_Wheel_Rotated" ID="20" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_FLC_Active" ID="21" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_LGA_Active" ID="22" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALT_Switch_Pressed" ID="23" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALT_Selected" ID="24" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_LGA_Selected" ID="25" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VAPPR_Selected" ID="26" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Pilot_Flying_Side" ID="27" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VS_Selected" ID="28" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_FLC_Selected" ID="29" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Selected_NAV_Source_Changed" ID="30" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Overspeed" ID="31" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ROLL_Selected" ID="32" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_GA_Switch_Pressed" ID="33" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALT_Active" ID="34" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_When_AP_Engaged" ID="35" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_APPR_Switch_Pressed" ID="36" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_HDG_Active" ID="37" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_LAPPR_Selected" ID="38" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALTSEL_Track" ID="39" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_HDG_Selected" ID="40" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_FLC_Switch_Pressed" ID="41" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALTSEL_Active" ID="42" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_LAPPR_Capture_Condition_Met" ID="43" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_LAPPR_Active" ID="44" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VGA_Selected" ID="45" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_HDG_Switch_Pressed" ID="46" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ROLL_Active" ID="47" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_NAV_Capture_Condition_Met" ID="48" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_PITCH_Active" ID="49" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Is_Offside_FD_On" ID="50" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Independent_Mode" ID="51" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALTSEL_Track_Condition_Met" ID="52" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_FD_Switch_Pressed" ID="53" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_NAV_Selected" ID="54" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VAPPR_Active" ID="55" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Pilot_Flying_Transfer" ID="56" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Modes_On" ID="57" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_Selected_NAV_Frequency_Changed" ID="58" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_NAV_Switch_Pressed" ID="59" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VAPPR_Capture_Condition_Met" ID="60" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALTSEL_Capture_Condition_Met" ID="61" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_SYNC_Switch_Pressed" ID="62" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_PITCH_Selected" ID="63" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/True$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VS_Active" ID="64" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_NAV_Active" ID="65" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/True$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VS_Switch_Pressed" ID="66" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_VGA_Active" ID="67" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<field label="FlightModes_ALTSEL_Target_Changed" ID="68" parentID="12">
   <tuple> <atom label="Snapshot$0"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="boolean/False$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="boolean/False$0"/> </tuple>
   <types> <type ID="9"/> <type ID="5"/> </types>
</field>

<sig label="steps/BaseSnapshot" ID="9" parentID="2" abstract="yes">
</sig>

<field label="conf" ID="69" parentID="9">
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_FD_OFF$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_ANNUNCIATIONS_OFF$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_LATERAL_NAV_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$0"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_FD_OFF$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_ANNUNCIATIONS_OFF$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_FD_OFF$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_FD_OFF$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_HDG_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_HDG_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_HDG_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_ROLL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_HDG_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_ROLL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_LATERAL_ROLL_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_NAV_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_FD_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_ANNUNCIATIONS_ON$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_LATERAL_NAV_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/> </tuple>
   <types> <type ID="9"/> <type ID="70"/> </types>
</field>

<field label="taken" ID="71" parentID="9">
   <tuple> <atom label="Snapshot$1"/> <atom label="FlightModes_LATERAL_NAV_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$2"/> <atom label="FlightModes_LATERAL_NAV_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_HDG_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$3"/> <atom label="FlightModes_LATERAL_NAV_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_FD_TurnFDOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_HDG_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$4"/> <atom label="FlightModes_LATERAL_NAV_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_FD_TurnFDOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_HDG_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_NAV_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$5"/> <atom label="FlightModes_LATERAL_ROLL_Clear$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_FD_TurnFDOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_HDG_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_NAV_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_LATERAL_ROLL_Clear$0"/> </tuple>
   <tuple> <atom label="Snapshot$6"/> <atom label="FlightModes_VERTICAL_ALTSEL_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$7"/> <atom label="FlightModes_LATERAL_HDG_Clear$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_HDG_Clear$0"/> </tuple>
   <tuple> <atom label="Snapshot$8"/> <atom label="FlightModes_LATERAL_ROLL_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_HDG_Clear$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_NAV_Capture$0"/> </tuple>
   <tuple> <atom label="Snapshot$9"/> <atom label="FlightModes_LATERAL_ROLL_Select$0"/> </tuple>
   <tuple> <atom label="Snapshot$10"/> <atom label="FlightModes_LATERAL_NAV_Clear$0"/> </tuple>
   <types> <type ID="9"/> <type ID="72"/> </types>
</field>

<sig label="this/FlightModes_LATERAL_New_Lateral_Mode_Activated" ID="73" parentID="74" one="yes">
   <atom label="FlightModes_LATERAL_New_Lateral_Mode_Activated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_New_Vertical_Mode_Activated" ID="75" parentID="74" one="yes">
   <atom label="FlightModes_VERTICAL_New_Vertical_Mode_Activated$0"/>
</sig>

<sig label="steps/InternalEvent" ID="74" parentID="15" abstract="yes">
</sig>

<sig label="steps/EnvironmentEvent" ID="76" parentID="15" abstract="yes">
</sig>

<sig label="steps/EventLabel" ID="15" parentID="2" abstract="yes">
</sig>

<sig label="this/FlightModes_FD_OFF" ID="77" parentID="78" one="yes">
   <atom label="FlightModes_FD_OFF$0"/>
</sig>

<sig label="this/FlightModes_FD_ON" ID="79" parentID="78" one="yes">
   <atom label="FlightModes_FD_ON$0"/>
</sig>

<sig label="this/FlightModes_FD" ID="78" parentID="80" abstract="yes">
</sig>

<sig label="this/FlightModes_ANNUNCIATIONS_OFF" ID="81" parentID="82" one="yes">
   <atom label="FlightModes_ANNUNCIATIONS_OFF$0"/>
</sig>

<sig label="this/FlightModes_ANNUNCIATIONS_ON" ID="83" parentID="82" one="yes">
   <atom label="FlightModes_ANNUNCIATIONS_ON$0"/>
</sig>

<sig label="this/FlightModes_ANNUNCIATIONS" ID="82" parentID="80" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_HDG_CLEARED" ID="84" parentID="85" one="yes">
   <atom label="FlightModes_LATERAL_HDG_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_HDG_SELECTED_ACTIVE" ID="86" parentID="87" one="yes">
   <atom label="FlightModes_LATERAL_HDG_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_HDG_SELECTED" ID="87" parentID="85" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_HDG" ID="85" parentID="88" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_NAV_CLEARED" ID="89" parentID="90" one="yes">
   <atom label="FlightModes_LATERAL_NAV_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_SELECTED_ARMED" ID="91" parentID="92" one="yes">
   <atom label="FlightModes_LATERAL_NAV_SELECTED_ARMED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_SELECTED_ACTIVE" ID="93" parentID="92" one="yes">
   <atom label="FlightModes_LATERAL_NAV_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_SELECTED" ID="92" parentID="90" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_NAV" ID="90" parentID="88" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_CLEARED" ID="94" parentID="95" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_SELECTED_ARMED" ID="96" parentID="97" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_SELECTED_ARMED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE" ID="98" parentID="97" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_SELECTED" ID="97" parentID="95" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR" ID="95" parentID="88" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_LGA_CLEARED" ID="99" parentID="100" one="yes">
   <atom label="FlightModes_LATERAL_LGA_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LGA_SELECTED_ACTIVE" ID="101" parentID="102" one="yes">
   <atom label="FlightModes_LATERAL_LGA_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LGA_SELECTED" ID="102" parentID="100" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_LGA" ID="100" parentID="88" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_ROLL_CLEARED" ID="103" parentID="104" one="yes">
   <atom label="FlightModes_LATERAL_ROLL_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_ROLL_SELECTED_ACTIVE" ID="105" parentID="106" one="yes">
   <atom label="FlightModes_LATERAL_ROLL_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_ROLL_SELECTED" ID="106" parentID="104" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL_ROLL" ID="104" parentID="88" abstract="yes">
</sig>

<sig label="this/FlightModes_LATERAL" ID="88" parentID="80" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_VS_CLEARED" ID="107" parentID="108" one="yes">
   <atom label="FlightModes_VERTICAL_VS_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VS_SELECTED_ACTIVE" ID="109" parentID="110" one="yes">
   <atom label="FlightModes_VERTICAL_VS_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VS_SELECTED" ID="110" parentID="108" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_VS" ID="108" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_FLC_CLEARED" ID="112" parentID="113" one="yes">
   <atom label="FlightModes_VERTICAL_FLC_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_FLC_SELECTED_ACTIVE" ID="114" parentID="115" one="yes">
   <atom label="FlightModes_VERTICAL_FLC_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_FLC_SELECTED" ID="115" parentID="113" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_FLC" ID="113" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_ALT_CLEARED" ID="116" parentID="117" one="yes">
   <atom label="FlightModes_VERTICAL_ALT_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALT_SELECTED_ACTIVE" ID="118" parentID="119" one="yes">
   <atom label="FlightModes_VERTICAL_ALT_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALT_SELECTED" ID="119" parentID="117" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_ALT" ID="117" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_CLEARED" ID="120" parentID="121" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED" ID="122" parentID="123" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE" ID="124" parentID="125" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK" ID="126" parentID="125" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE" ID="125" parentID="123" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_SELECTED" ID="123" parentID="121" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL" ID="121" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_CLEARED" ID="127" parentID="128" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_SELECTED_ARMED" ID="129" parentID="130" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_SELECTED_ARMED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE" ID="131" parentID="130" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_SELECTED" ID="130" parentID="128" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR" ID="128" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_VGA_CLEARED" ID="132" parentID="133" one="yes">
   <atom label="FlightModes_VERTICAL_VGA_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VGA_SELECTED_ACTIVE" ID="134" parentID="135" one="yes">
   <atom label="FlightModes_VERTICAL_VGA_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VGA_SELECTED" ID="135" parentID="133" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_VGA" ID="133" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_PITCH_CLEARED" ID="136" parentID="137" one="yes">
   <atom label="FlightModes_VERTICAL_PITCH_CLEARED$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE" ID="138" parentID="139" one="yes">
   <atom label="FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_PITCH_SELECTED" ID="139" parentID="137" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL_PITCH" ID="137" parentID="111" abstract="yes">
</sig>

<sig label="this/FlightModes_VERTICAL" ID="111" parentID="80" abstract="yes">
</sig>

<sig label="this/FlightModes" ID="80" parentID="140" abstract="yes">
</sig>

<sig label="this/SystemState" ID="140" parentID="70" abstract="yes">
</sig>

<sig label="steps/StateLabel" ID="70" parentID="2" abstract="yes">
</sig>

<sig label="this/FlightModes_FD_TurnFDOn" ID="141" parentID="72" one="yes">
   <atom label="FlightModes_FD_TurnFDOn$0"/>
</sig>

<sig label="this/FlightModes_FD_TurnFDOff" ID="142" parentID="72" one="yes">
   <atom label="FlightModes_FD_TurnFDOff$0"/>
</sig>

<sig label="this/FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn" ID="143" parentID="72" one="yes">
   <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn$0"/>
</sig>

<sig label="this/FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff" ID="144" parentID="72" one="yes">
   <atom label="FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_HDG_Select" ID="145" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_HDG_Select$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_HDG_Clear" ID="146" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_HDG_Clear$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_HDG_NewLateralModeActivated" ID="147" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_HDG_NewLateralModeActivated$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_Select" ID="148" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_NAV_Select$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_Capture" ID="149" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_NAV_Capture$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_Clear" ID="150" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_NAV_Clear$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_NAV_NewLateralModeActivated" ID="151" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_NAV_NewLateralModeActivated$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_Select" ID="152" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_Select$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_Capture" ID="153" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_Capture$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_Clear" ID="154" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_Clear$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LAPPR_NewLateralModeActivated" ID="155" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LAPPR_NewLateralModeActivated$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LGA_Select" ID="156" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LGA_Select$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LGA_Clear" ID="157" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LGA_Clear$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_LGA_NewLateralModeActivated" ID="158" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_LGA_NewLateralModeActivated$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_ROLL_Select" ID="159" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_ROLL_Select$0"/>
</sig>

<sig label="this/FlightModes_LATERAL_ROLL_Clear" ID="160" parentID="72" one="yes">
   <atom label="FlightModes_LATERAL_ROLL_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VS_Select" ID="161" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VS_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VS_Clear" ID="162" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VS_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VS_NewVerticalModeActivated" ID="163" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VS_NewVerticalModeActivated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_FLC_Select" ID="164" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_FLC_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_FLC_Clear" ID="165" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_FLC_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_FLC_NewVerticalModeActivated" ID="166" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_FLC_NewVerticalModeActivated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALT_Select" ID="167" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALT_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALT_Clear" ID="168" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALT_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALT_NewVerticalModeActivated" ID="169" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALT_NewVerticalModeActivated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_Select" ID="170" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_Capture" ID="171" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_Capture$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_Track" ID="172" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_Track$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_Clear" ID="173" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated" ID="174" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_Select" ID="175" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_Capture" ID="176" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_Capture$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_Clear" ID="177" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated" ID="178" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VGA_Select" ID="179" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VGA_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VGA_Clear" ID="180" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VGA_Clear$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_VGA_NewVerticalModeActivated" ID="181" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_VGA_NewVerticalModeActivated$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_PITCH_Select" ID="182" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_PITCH_Select$0"/>
</sig>

<sig label="this/FlightModes_VERTICAL_PITCH_Clear" ID="183" parentID="72" one="yes">
   <atom label="FlightModes_VERTICAL_PITCH_Clear$0"/>
</sig>

<sig label="steps/TransitionLabel" ID="72" parentID="2" abstract="yes">
</sig>

<sig label="steps/ctl/TS" ID="184" parentID="2" one="yes">
   <atom label="steps/ctl/TS$0"/>
</sig>

<field label="S0" ID="185" parentID="184">
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$0"/> </tuple>
   <types> <type ID="184"/> <type ID="9"/> </types>
</field>

<field label="sigma" ID="186" parentID="184">
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$0"/> <atom label="Snapshot$1"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$1"/> <atom label="Snapshot$2"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$2"/> <atom label="Snapshot$3"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$3"/> <atom label="Snapshot$4"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$4"/> <atom label="Snapshot$5"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$5"/> <atom label="Snapshot$6"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$6"/> <atom label="Snapshot$7"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$7"/> <atom label="Snapshot$8"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$8"/> <atom label="Snapshot$9"/> </tuple>
   <tuple> <atom label="steps/ctl/TS$0"/> <atom label="Snapshot$9"/> <atom label="Snapshot$10"/> </tuple>
   <types> <type ID="184"/> <type ID="9"/> <type ID="9"/> </types>
</field>

<sig label="ordering/Ord" ID="187" parentID="2" one="yes" private="yes">
   <atom label="ordering/Ord$0"/>
</sig>

<field label="First" ID="188" parentID="187" private="yes">
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$0"/> </tuple>
   <types> <type ID="187"/> <type ID="9"/> </types>
</field>

<field label="Next" ID="189" parentID="187" private="yes">
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$0"/> <atom label="Snapshot$1"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$1"/> <atom label="Snapshot$2"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$2"/> <atom label="Snapshot$3"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$3"/> <atom label="Snapshot$4"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$4"/> <atom label="Snapshot$5"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$5"/> <atom label="Snapshot$6"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$6"/> <atom label="Snapshot$7"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$7"/> <atom label="Snapshot$8"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$8"/> <atom label="Snapshot$9"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="Snapshot$9"/> <atom label="Snapshot$10"/> </tuple>
   <types> <type ID="187"/> <type ID="9"/> <type ID="9"/> </types>
</field>

<sig label="univ" ID="2" builtin="yes">
</sig>

<skolem label="$Default_Lateral_Mode_Is_ROLL_s" ID="190">
   <tuple> <atom label="Snapshot$9"/> </tuple>
   <types> <type ID="9"/> </types>
</skolem>

</instance>

<source filename="/media/jis/TOSHIBA EXT/JIS/Estudio/UWaterloo/Research/Git/dash/Models/Optimisations/optimised/generated_optimised.als" content="open util/boolean &#x000a;&#x000a;open util/steps[Snapshot]&#x000a;open util/boolean&#x000a;open util/ordering[Snapshot]&#x000a;&#x000a;// Snapshot definition&#x000a;    sig Snapshot extends BaseSnapshot {&#x000a;        stable: one Bool,&#x000a;        events: set EventLabel,&#x000a;        FlightModes_Active_Side : one Bool,&#x000a;        FlightModes_FD_On : one Bool,&#x000a;        FlightModes_ALTSEL_Selected : one Bool,&#x000a;        FlightModes_Is_AP_Engaged : one Bool,&#x000a;        FlightModes_VS_Pitch_Wheel_Rotated : one Bool,&#x000a;        FlightModes_FLC_Active : one Bool,&#x000a;        FlightModes_LGA_Active : one Bool,&#x000a;        FlightModes_ALT_Switch_Pressed : one Bool,&#x000a;        FlightModes_ALT_Selected : one Bool,&#x000a;        FlightModes_LGA_Selected : one Bool,&#x000a;        FlightModes_VAPPR_Selected : one Bool,&#x000a;        FlightModes_Pilot_Flying_Side : one Bool,&#x000a;        FlightModes_VS_Selected : one Bool,&#x000a;        FlightModes_FLC_Selected : one Bool,&#x000a;        FlightModes_Selected_NAV_Source_Changed : one Bool,&#x000a;        FlightModes_Overspeed : one Bool,&#x000a;        FlightModes_ROLL_Selected : one Bool,&#x000a;        FlightModes_GA_Switch_Pressed : one Bool,&#x000a;        FlightModes_ALT_Active : one Bool,&#x000a;        FlightModes_When_AP_Engaged : one Bool,&#x000a;        FlightModes_APPR_Switch_Pressed : one Bool,&#x000a;        FlightModes_HDG_Active : one Bool,&#x000a;        FlightModes_LAPPR_Selected : one Bool,&#x000a;        FlightModes_ALTSEL_Track : one Bool,&#x000a;        FlightModes_HDG_Selected : one Bool,&#x000a;        FlightModes_FLC_Switch_Pressed : one Bool,&#x000a;        FlightModes_ALTSEL_Active : one Bool,&#x000a;        FlightModes_LAPPR_Capture_Condition_Met : one Bool,&#x000a;        FlightModes_LAPPR_Active : one Bool,&#x000a;        FlightModes_VGA_Selected : one Bool,&#x000a;        FlightModes_HDG_Switch_Pressed : one Bool,&#x000a;        FlightModes_ROLL_Active : one Bool,&#x000a;        FlightModes_NAV_Capture_Condition_Met : one Bool,&#x000a;        FlightModes_PITCH_Active : one Bool,&#x000a;        FlightModes_Is_Offside_FD_On : one Bool,&#x000a;        FlightModes_Independent_Mode : one Bool,&#x000a;        FlightModes_ALTSEL_Track_Condition_Met : one Bool,&#x000a;        FlightModes_FD_Switch_Pressed : one Bool,&#x000a;        FlightModes_NAV_Selected : one Bool,&#x000a;        FlightModes_VAPPR_Active : one Bool,&#x000a;        FlightModes_Pilot_Flying_Transfer : one Bool,&#x000a;        FlightModes_Modes_On : one Bool,&#x000a;        FlightModes_Selected_NAV_Frequency_Changed : one Bool,&#x000a;        FlightModes_NAV_Switch_Pressed : one Bool,&#x000a;        FlightModes_VAPPR_Capture_Condition_Met : one Bool,&#x000a;        FlightModes_ALTSEL_Capture_Condition_Met : one Bool,&#x000a;        FlightModes_SYNC_Switch_Pressed : one Bool,&#x000a;        FlightModes_PITCH_Selected : one Bool,&#x000a;        FlightModes_VS_Active : one Bool,&#x000a;        FlightModes_NAV_Active : one Bool,&#x000a;        FlightModes_VS_Switch_Pressed : one Bool,&#x000a;        FlightModes_VGA_Active : one Bool,&#x000a;        FlightModes_ALTSEL_Target_Changed : one Bool&#x000a;    }&#x000a;&#x000a;/***************************** STATE SPACE ************************************/&#x000a;    abstract sig SystemState extends StateLabel {}&#x000a;    abstract sig FlightModes extends SystemState {}&#x000a;    abstract sig FlightModes_FD extends FlightModes {}&#x000a;    one sig FlightModes_FD_OFF extends FlightModes_FD {}&#x000a;    one sig FlightModes_FD_ON extends FlightModes_FD {}&#x000a;    abstract sig FlightModes_ANNUNCIATIONS extends FlightModes {}&#x000a;    one sig FlightModes_ANNUNCIATIONS_OFF extends FlightModes_ANNUNCIATIONS {}&#x000a;    one sig FlightModes_ANNUNCIATIONS_ON extends FlightModes_ANNUNCIATIONS {}&#x000a;    abstract sig FlightModes_LATERAL extends FlightModes {}&#x000a;    abstract sig FlightModes_LATERAL_HDG extends FlightModes_LATERAL {}&#x000a;    one sig FlightModes_LATERAL_HDG_CLEARED extends FlightModes_LATERAL_HDG {}&#x000a;    abstract sig FlightModes_LATERAL_HDG_SELECTED extends FlightModes_LATERAL_HDG {}&#x000a;    one sig FlightModes_LATERAL_HDG_SELECTED_ACTIVE extends FlightModes_LATERAL_HDG_SELECTED {}&#x000a;    abstract sig FlightModes_LATERAL_NAV extends FlightModes_LATERAL {}&#x000a;    one sig FlightModes_LATERAL_NAV_CLEARED extends FlightModes_LATERAL_NAV {}&#x000a;    abstract sig FlightModes_LATERAL_NAV_SELECTED extends FlightModes_LATERAL_NAV {}&#x000a;    one sig FlightModes_LATERAL_NAV_SELECTED_ARMED extends FlightModes_LATERAL_NAV_SELECTED {}&#x000a;    one sig FlightModes_LATERAL_NAV_SELECTED_ACTIVE extends FlightModes_LATERAL_NAV_SELECTED {}&#x000a;    abstract sig FlightModes_LATERAL_LAPPR extends FlightModes_LATERAL {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_CLEARED extends FlightModes_LATERAL_LAPPR {}&#x000a;    abstract sig FlightModes_LATERAL_LAPPR_SELECTED extends FlightModes_LATERAL_LAPPR {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_SELECTED_ARMED extends FlightModes_LATERAL_LAPPR_SELECTED {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE extends FlightModes_LATERAL_LAPPR_SELECTED {}&#x000a;    abstract sig FlightModes_LATERAL_LGA extends FlightModes_LATERAL {}&#x000a;    one sig FlightModes_LATERAL_LGA_CLEARED extends FlightModes_LATERAL_LGA {}&#x000a;    abstract sig FlightModes_LATERAL_LGA_SELECTED extends FlightModes_LATERAL_LGA {}&#x000a;    one sig FlightModes_LATERAL_LGA_SELECTED_ACTIVE extends FlightModes_LATERAL_LGA_SELECTED {}&#x000a;    abstract sig FlightModes_LATERAL_ROLL extends FlightModes_LATERAL {}&#x000a;    one sig FlightModes_LATERAL_ROLL_CLEARED extends FlightModes_LATERAL_ROLL {}&#x000a;    abstract sig FlightModes_LATERAL_ROLL_SELECTED extends FlightModes_LATERAL_ROLL {}&#x000a;    one sig FlightModes_LATERAL_ROLL_SELECTED_ACTIVE extends FlightModes_LATERAL_ROLL_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL extends FlightModes {}&#x000a;    abstract sig FlightModes_VERTICAL_VS extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_VS_CLEARED extends FlightModes_VERTICAL_VS {}&#x000a;    abstract sig FlightModes_VERTICAL_VS_SELECTED extends FlightModes_VERTICAL_VS {}&#x000a;    one sig FlightModes_VERTICAL_VS_SELECTED_ACTIVE extends FlightModes_VERTICAL_VS_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL_FLC extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_FLC_CLEARED extends FlightModes_VERTICAL_FLC {}&#x000a;    abstract sig FlightModes_VERTICAL_FLC_SELECTED extends FlightModes_VERTICAL_FLC {}&#x000a;    one sig FlightModes_VERTICAL_FLC_SELECTED_ACTIVE extends FlightModes_VERTICAL_FLC_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL_ALT extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_ALT_CLEARED extends FlightModes_VERTICAL_ALT {}&#x000a;    abstract sig FlightModes_VERTICAL_ALT_SELECTED extends FlightModes_VERTICAL_ALT {}&#x000a;    one sig FlightModes_VERTICAL_ALT_SELECTED_ACTIVE extends FlightModes_VERTICAL_ALT_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL_ALTSEL extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_CLEARED extends FlightModes_VERTICAL_ALTSEL {}&#x000a;    abstract sig FlightModes_VERTICAL_ALTSEL_SELECTED extends FlightModes_VERTICAL_ALTSEL {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED extends FlightModes_VERTICAL_ALTSEL_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE extends FlightModes_VERTICAL_ALTSEL_SELECTED {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE extends FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK extends FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE {}&#x000a;    abstract sig FlightModes_VERTICAL_VAPPR extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_CLEARED extends FlightModes_VERTICAL_VAPPR {}&#x000a;    abstract sig FlightModes_VERTICAL_VAPPR_SELECTED extends FlightModes_VERTICAL_VAPPR {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_SELECTED_ARMED extends FlightModes_VERTICAL_VAPPR_SELECTED {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE extends FlightModes_VERTICAL_VAPPR_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL_VGA extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_VGA_CLEARED extends FlightModes_VERTICAL_VGA {}&#x000a;    abstract sig FlightModes_VERTICAL_VGA_SELECTED extends FlightModes_VERTICAL_VGA {}&#x000a;    one sig FlightModes_VERTICAL_VGA_SELECTED_ACTIVE extends FlightModes_VERTICAL_VGA_SELECTED {}&#x000a;    abstract sig FlightModes_VERTICAL_PITCH extends FlightModes_VERTICAL {}&#x000a;    one sig FlightModes_VERTICAL_PITCH_CLEARED extends FlightModes_VERTICAL_PITCH {}&#x000a;    abstract sig FlightModes_VERTICAL_PITCH_SELECTED extends FlightModes_VERTICAL_PITCH {}&#x000a;    one sig FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE extends FlightModes_VERTICAL_PITCH_SELECTED {}&#x000a;&#x000a;/***************************** EVENTS SPACE ***********************************/&#x000a;    one sig FlightModes_LATERAL_New_Lateral_Mode_Activated extends InternalEvent {}&#x000a;    one sig FlightModes_VERTICAL_New_Vertical_Mode_Activated extends InternalEvent {}&#x000a;&#x000a;/*************************** TRANSITIONS SPACE ********************************/&#x000a;    one sig FlightModes_FD_TurnFDOn extends TransitionLabel {}&#x000a;    one sig FlightModes_FD_TurnFDOff extends TransitionLabel {}&#x000a;    one sig FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn extends TransitionLabel {}&#x000a;    one sig FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_HDG_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_HDG_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_HDG_NewLateralModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_NAV_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_NAV_Capture extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_NAV_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_NAV_NewLateralModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_Capture extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LAPPR_NewLateralModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LGA_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LGA_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_LGA_NewLateralModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_ROLL_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_LATERAL_ROLL_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VS_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VS_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VS_NewVerticalModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_FLC_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_FLC_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_FLC_NewVerticalModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALT_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALT_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALT_NewVerticalModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_Capture extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_Track extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_Capture extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VGA_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VGA_Clear extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_VGA_NewVerticalModeActivated extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_PITCH_Select extends TransitionLabel {}&#x000a;    one sig FlightModes_VERTICAL_PITCH_Clear extends TransitionLabel {}&#x000a;&#x000a;    // Transition FlightModes_FD_TurnFDOn&#x000a;    pred pre_FlightModes_FD_TurnFDOn[s:Snapshot] {&#x000a;        FlightModes_FD_OFF in s.conf&#x000a;        (s.FlightModes_FD_Switch_Pressed) = True or (s.FlightModes_When_AP_Engaged) = True or (s.FlightModes_Overspeed) = True or (s.FlightModes_HDG_Switch_Pressed) = True or (s.FlightModes_NAV_Switch_Pressed) = True or (s.FlightModes_APPR_Switch_Pressed) = True or (s.FlightModes_GA_Switch_Pressed) = True or (s.FlightModes_VS_Switch_Pressed) = True or (s.FlightModes_FLC_Switch_Pressed) = True or (s.FlightModes_ALT_Switch_Pressed) = True or (s.FlightModes_APPR_Switch_Pressed) = True or (s.FlightModes_GA_Switch_Pressed) = True or ((s.FlightModes_VS_Pitch_Wheel_Rotated) = True and (s.FlightModes_VS_Active) = False and (s.FlightModes_VAPPR_Active) = False and (s.FlightModes_Overspeed) = False) or ((s.FlightModes_Pilot_Flying_Transfer) = True and (s.FlightModes_Pilot_Flying_Side) = True and (s.FlightModes_Modes_On) = True)&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_FD_TurnFDOn[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_FD_OFF + {&#x000a;            FlightModes_FD_ON&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_FD_TurnFDOn] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_FD_ON[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_FD_TurnFDOn[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_FD_TurnFDOn[s]&#x000a;        pos_FlightModes_FD_TurnFDOn[s, s&apos;]&#x000a;        semantics_FlightModes_FD_TurnFDOn[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_FD_TurnFDOn[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_FD_OFF in s.conf&#x000a;        (_s.FlightModes_FD_Switch_Pressed) = True or (_s.FlightModes_When_AP_Engaged) = True or (_s.FlightModes_Overspeed) = True or (_s.FlightModes_HDG_Switch_Pressed) = True or (_s.FlightModes_NAV_Switch_Pressed) = True or (_s.FlightModes_APPR_Switch_Pressed) = True or (_s.FlightModes_GA_Switch_Pressed) = True or (_s.FlightModes_VS_Switch_Pressed) = True or (_s.FlightModes_FLC_Switch_Pressed) = True or (_s.FlightModes_ALT_Switch_Pressed) = True or (_s.FlightModes_APPR_Switch_Pressed) = True or (_s.FlightModes_GA_Switch_Pressed) = True or ((_s.FlightModes_VS_Pitch_Wheel_Rotated) = True and (s.FlightModes_VS_Active) = False and (s.FlightModes_VAPPR_Active) = False and (_s.FlightModes_Overspeed) = False) or ((_s.FlightModes_Pilot_Flying_Transfer) = True and (_s.FlightModes_Pilot_Flying_Side) = True and (s.FlightModes_Modes_On) = True)&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_FD_TurnFDOn + &#x000a;                FlightModes_FD_TurnFDOff&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_FD_TurnFDOn + &#x000a;                FlightModes_FD_TurnFDOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_FD_TurnFDOn[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_FD_TurnFDOn&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_FD_TurnFDOn&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_FD_TurnFDOn + &#x000a;                FlightModes_FD_TurnFDOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_FD_TurnFDOff&#x000a;    pred pre_FlightModes_FD_TurnFDOff[s:Snapshot] {&#x000a;        FlightModes_FD_ON in s.conf&#x000a;        {&#x000a;            (s.FlightModes_FD_Switch_Pressed) = True and (s.FlightModes_Overspeed) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_FD_TurnFDOff[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_FD_ON + {&#x000a;            FlightModes_FD_OFF&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_FD_TurnFDOff] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_FD_ON in s.conf =&gt; exit_FlightModes_FD_ON[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_FD_TurnFDOff[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_FD_TurnFDOff[s]&#x000a;        pos_FlightModes_FD_TurnFDOff[s, s&apos;]&#x000a;        semantics_FlightModes_FD_TurnFDOff[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_FD_TurnFDOff[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_FD_ON in s.conf&#x000a;        {&#x000a;            (_s.FlightModes_FD_Switch_Pressed) = True and (_s.FlightModes_Overspeed) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_FD_TurnFDOn + &#x000a;                FlightModes_FD_TurnFDOff&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_FD_TurnFDOn + &#x000a;                FlightModes_FD_TurnFDOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_FD_TurnFDOff[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_FD_TurnFDOff&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_FD_TurnFDOff&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_FD_TurnFDOn + &#x000a;                FlightModes_FD_TurnFDOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn&#x000a;    pred pre_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s:Snapshot] {&#x000a;        FlightModes_ANNUNCIATIONS_OFF in s.conf&#x000a;        {&#x000a;            (s.FlightModes_Is_AP_Engaged) = True or (s.FlightModes_Is_Offside_FD_On) = True or (s.FlightModes_FD_On) = True&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_ANNUNCIATIONS_OFF + {&#x000a;            FlightModes_ANNUNCIATIONS_ON&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_ANNUNCIATIONS_ON[s&apos;]&#x000a;        FlightModes_ANNUNCIATIONS_OFF in s.conf =&gt; exit_FlightModes_ANNUNCIATIONS_OFF[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s]&#x000a;        pos_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;]&#x000a;        semantics_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_ANNUNCIATIONS_OFF in s.conf&#x000a;        {&#x000a;            (_s.FlightModes_Is_AP_Engaged) = True or (_s.FlightModes_Is_Offside_FD_On) = True or (s.FlightModes_FD_On) = True&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn + &#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn + &#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn + &#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;    pred pre_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s:Snapshot] {&#x000a;        FlightModes_ANNUNCIATIONS_ON in s.conf&#x000a;        {&#x000a;            (s.FlightModes_Is_AP_Engaged) = False and (s.FlightModes_Is_Offside_FD_On) = False and (s.FlightModes_FD_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_ANNUNCIATIONS_ON + {&#x000a;            FlightModes_ANNUNCIATIONS_OFF&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_ANNUNCIATIONS_OFF[s&apos;]&#x000a;        FlightModes_ANNUNCIATIONS_ON in s.conf =&gt; exit_FlightModes_ANNUNCIATIONS_ON[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s]&#x000a;        pos_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;]&#x000a;        semantics_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_ANNUNCIATIONS_ON in s.conf&#x000a;        {&#x000a;            (_s.FlightModes_Is_AP_Engaged) = False and (_s.FlightModes_Is_Offside_FD_On) = False and (s.FlightModes_FD_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn + &#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn + &#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn + &#x000a;                FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_HDG_Select&#x000a;    pred pre_FlightModes_LATERAL_HDG_Select[s:Snapshot] {&#x000a;        FlightModes_LATERAL_HDG_CLEARED in s.conf&#x000a;        (s.FlightModes_HDG_Switch_Pressed) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_HDG_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_HDG_CLEARED + {&#x000a;            FlightModes_LATERAL_HDG_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_LATERAL_New_Lateral_Mode_Activated}, FlightModes_LATERAL_HDG_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_LATERAL_New_Lateral_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_LATERAL_New_Lateral_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_HDG_SELECTED[s&apos;]&#x000a;        enter_FlightModes_LATERAL_HDG_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_HDG_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_HDG_Select[s]&#x000a;        pos_FlightModes_LATERAL_HDG_Select[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_HDG_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_HDG_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_HDG_CLEARED in s.conf&#x000a;        (_s.FlightModes_HDG_Switch_Pressed) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_HDG_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_HDG_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_HDG_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_HDG_Clear&#x000a;    pred pre_FlightModes_LATERAL_HDG_Clear[s:Snapshot] {&#x000a;        (some FlightModes_LATERAL_HDG_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_HDG_Switch_Pressed) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_HDG_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_HDG_SELECTED + {&#x000a;            FlightModes_LATERAL_HDG_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_HDG_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_HDG_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_HDG_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_HDG_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_HDG_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_HDG_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_HDG_Clear[s]&#x000a;        pos_FlightModes_LATERAL_HDG_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_HDG_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_HDG_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_LATERAL_HDG_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_HDG_Switch_Pressed) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_HDG_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_HDG_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_HDG_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_LATERAL_HDG_NewLateralModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_HDG_NewLateralModeActivated&#x000a;    pred pre_FlightModes_LATERAL_HDG_NewLateralModeActivated[s:Snapshot] {&#x000a;        FlightModes_LATERAL_HDG_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_HDG_SELECTED + {&#x000a;            FlightModes_LATERAL_HDG_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_HDG_NewLateralModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_HDG_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_HDG_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_HDG_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_HDG_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_HDG_NewLateralModeActivated[s]&#x000a;        pos_FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_HDG_NewLateralModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_HDG_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_HDG_NewLateralModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_HDG_NewLateralModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_HDG_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_HDG_Clear + &#x000a;                FlightModes_LATERAL_HDG_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_NAV_Select&#x000a;    pred pre_FlightModes_LATERAL_NAV_Select[s:Snapshot] {&#x000a;        FlightModes_LATERAL_NAV_CLEARED in s.conf&#x000a;        (s.FlightModes_NAV_Switch_Pressed) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_NAV_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_NAV_CLEARED + {&#x000a;            FlightModes_LATERAL_NAV_SELECTED_ARMED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_NAV_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_NAV_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_NAV_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_NAV_Select[s]&#x000a;        pos_FlightModes_LATERAL_NAV_Select[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_NAV_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_NAV_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_NAV_CLEARED in s.conf&#x000a;        (_s.FlightModes_NAV_Switch_Pressed) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_NAV_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_NAV_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_NAV_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_NAV_Capture&#x000a;    pred pre_FlightModes_LATERAL_NAV_Capture[s:Snapshot] {&#x000a;        FlightModes_LATERAL_NAV_SELECTED_ARMED in s.conf&#x000a;        (s.FlightModes_NAV_Capture_Condition_Met) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_NAV_Capture[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_NAV_SELECTED_ARMED + {&#x000a;            FlightModes_LATERAL_NAV_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_LATERAL_New_Lateral_Mode_Activated}, FlightModes_LATERAL_NAV_Capture] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_LATERAL_New_Lateral_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_LATERAL_New_Lateral_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_NAV_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_NAV_Capture[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_NAV_Capture[s]&#x000a;        pos_FlightModes_LATERAL_NAV_Capture[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_NAV_Capture[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_NAV_Capture[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_NAV_SELECTED_ARMED in s.conf&#x000a;        (_s.FlightModes_NAV_Capture_Condition_Met) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_NAV_Capture&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_NAV_Capture&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_NAV_Capture[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_NAV_Capture&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_NAV_Capture&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_NAV_Capture&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_NAV_Clear&#x000a;    pred pre_FlightModes_LATERAL_NAV_Clear[s:Snapshot] {&#x000a;        (some FlightModes_LATERAL_NAV_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_NAV_Switch_Pressed) = True or (s.FlightModes_Selected_NAV_Source_Changed) = True or (s.FlightModes_Selected_NAV_Frequency_Changed) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_NAV_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_NAV_SELECTED + {&#x000a;            FlightModes_LATERAL_NAV_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_NAV_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_NAV_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_NAV_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_NAV_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_NAV_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_NAV_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_NAV_Clear[s]&#x000a;        pos_FlightModes_LATERAL_NAV_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_NAV_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_NAV_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_LATERAL_NAV_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_NAV_Switch_Pressed) = True or (_s.FlightModes_Selected_NAV_Source_Changed) = True or (_s.FlightModes_Selected_NAV_Frequency_Changed) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_NAV_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_NAV_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_NAV_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_LATERAL_NAV_Capture[s]&#x000a;        !pre_FlightModes_LATERAL_NAV_NewLateralModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;    pred pre_FlightModes_LATERAL_NAV_NewLateralModeActivated[s:Snapshot] {&#x000a;        FlightModes_LATERAL_NAV_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_NAV_SELECTED + {&#x000a;            FlightModes_LATERAL_NAV_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_NAV_NewLateralModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_NAV_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_NAV_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_NAV_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_NAV_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_NAV_NewLateralModeActivated[s]&#x000a;        pos_FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_NAV_NewLateralModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_NAV_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_NAV_Clear + &#x000a;                FlightModes_LATERAL_NAV_Capture + &#x000a;                FlightModes_LATERAL_NAV_Select + &#x000a;                FlightModes_LATERAL_NAV_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LAPPR_Select&#x000a;    pred pre_FlightModes_LATERAL_LAPPR_Select[s:Snapshot] {&#x000a;        FlightModes_LATERAL_LAPPR_CLEARED in s.conf&#x000a;        (s.FlightModes_APPR_Switch_Pressed) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LAPPR_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LAPPR_CLEARED + {&#x000a;            FlightModes_LATERAL_LAPPR_SELECTED_ARMED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_LAPPR_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_LAPPR_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LAPPR_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LAPPR_Select[s]&#x000a;        pos_FlightModes_LATERAL_LAPPR_Select[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LAPPR_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LAPPR_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_LAPPR_CLEARED in s.conf&#x000a;        (_s.FlightModes_APPR_Switch_Pressed) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LAPPR_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LAPPR_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LAPPR_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LAPPR_Capture&#x000a;    pred pre_FlightModes_LATERAL_LAPPR_Capture[s:Snapshot] {&#x000a;        FlightModes_LATERAL_LAPPR_SELECTED_ARMED in s.conf&#x000a;        (s.FlightModes_LAPPR_Capture_Condition_Met) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LAPPR_Capture[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LAPPR_SELECTED_ARMED + {&#x000a;            FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_LATERAL_New_Lateral_Mode_Activated}, FlightModes_LATERAL_LAPPR_Capture] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_LATERAL_New_Lateral_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_LATERAL_New_Lateral_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LAPPR_Capture[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LAPPR_Capture[s]&#x000a;        pos_FlightModes_LATERAL_LAPPR_Capture[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LAPPR_Capture[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LAPPR_Capture[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_LAPPR_SELECTED_ARMED in s.conf&#x000a;        (_s.FlightModes_LAPPR_Capture_Condition_Met) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LAPPR_Capture[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LAPPR_Capture&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LAPPR_Capture&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LAPPR_Clear&#x000a;    pred pre_FlightModes_LATERAL_LAPPR_Clear[s:Snapshot] {&#x000a;        (some FlightModes_LATERAL_LAPPR_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_APPR_Switch_Pressed) = True or (s.FlightModes_Selected_NAV_Source_Changed) = True or (s.FlightModes_Selected_NAV_Frequency_Changed) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LAPPR_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LAPPR_SELECTED + {&#x000a;            FlightModes_LATERAL_LAPPR_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_LAPPR_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_LAPPR_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_LAPPR_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LAPPR_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LAPPR_Clear[s]&#x000a;        pos_FlightModes_LATERAL_LAPPR_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LAPPR_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LAPPR_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_LATERAL_LAPPR_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_APPR_Switch_Pressed) = True or (_s.FlightModes_Selected_NAV_Source_Changed) = True or (_s.FlightModes_Selected_NAV_Frequency_Changed) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LAPPR_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LAPPR_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LAPPR_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_LATERAL_LAPPR_Capture[s]&#x000a;        !pre_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;    pred pre_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s:Snapshot] {&#x000a;        FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LAPPR_SELECTED + {&#x000a;            FlightModes_LATERAL_LAPPR_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_LAPPR_NewLateralModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_LAPPR_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_LAPPR_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s]&#x000a;        pos_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LAPPR_Capture + &#x000a;                FlightModes_LATERAL_LAPPR_Clear + &#x000a;                FlightModes_LATERAL_LAPPR_Select + &#x000a;                FlightModes_LATERAL_LAPPR_NewLateralModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LGA_Select&#x000a;    pred pre_FlightModes_LATERAL_LGA_Select[s:Snapshot] {&#x000a;        FlightModes_LATERAL_LGA_CLEARED in s.conf&#x000a;        (s.FlightModes_GA_Switch_Pressed) = True and (s.FlightModes_Overspeed) = False&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LGA_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LGA_CLEARED + {&#x000a;            FlightModes_LATERAL_LGA_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_LATERAL_New_Lateral_Mode_Activated}, FlightModes_LATERAL_LGA_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_LATERAL_New_Lateral_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_LATERAL_New_Lateral_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_LATERAL_New_Lateral_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_LGA_SELECTED[s&apos;]&#x000a;        enter_FlightModes_LATERAL_LGA_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LGA_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LGA_Select[s]&#x000a;        pos_FlightModes_LATERAL_LGA_Select[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LGA_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LGA_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_LGA_CLEARED in s.conf&#x000a;        (_s.FlightModes_GA_Switch_Pressed) = True and (_s.FlightModes_Overspeed) = False&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LGA_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LGA_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LGA_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LGA_Clear&#x000a;    pred pre_FlightModes_LATERAL_LGA_Clear[s:Snapshot] {&#x000a;        (some FlightModes_LATERAL_LGA_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_When_AP_Engaged) = True or (s.FlightModes_SYNC_Switch_Pressed) = True or (s.FlightModes_VGA_Active) = False or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LGA_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LGA_SELECTED + {&#x000a;            FlightModes_LATERAL_LGA_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_LGA_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_LGA_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_LGA_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_LGA_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_LGA_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LGA_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LGA_Clear[s]&#x000a;        pos_FlightModes_LATERAL_LGA_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LGA_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LGA_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_LATERAL_LGA_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_When_AP_Engaged) = True or (_s.FlightModes_SYNC_Switch_Pressed) = True or (s.FlightModes_VGA_Active) = False or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LGA_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LGA_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LGA_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_LATERAL_LGA_NewLateralModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_LGA_NewLateralModeActivated&#x000a;    pred pre_FlightModes_LATERAL_LGA_NewLateralModeActivated[s:Snapshot] {&#x000a;        FlightModes_LATERAL_LGA_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_LGA_SELECTED + {&#x000a;            FlightModes_LATERAL_LGA_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_LGA_NewLateralModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_LGA_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_LGA_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_LGA_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_LGA_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_LGA_NewLateralModeActivated[s]&#x000a;        pos_FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_LGA_NewLateralModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_LGA_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;            FlightModes_LATERAL_New_Lateral_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_LGA_NewLateralModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_LGA_NewLateralModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_LGA_Clear + &#x000a;                FlightModes_LATERAL_LGA_NewLateralModeActivated + &#x000a;                FlightModes_LATERAL_LGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_ROLL_Select&#x000a;    pred pre_FlightModes_LATERAL_ROLL_Select[s:Snapshot] {&#x000a;        FlightModes_LATERAL_ROLL_CLEARED in s.conf&#x000a;        !((s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True)&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_ROLL_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_ROLL_CLEARED + {&#x000a;            FlightModes_LATERAL_ROLL_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_ROLL_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_LATERAL_ROLL_SELECTED[s&apos;]&#x000a;        enter_FlightModes_LATERAL_ROLL_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_ROLL_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_ROLL_Select[s]&#x000a;        pos_FlightModes_LATERAL_ROLL_Select[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_ROLL_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_ROLL_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_ROLL_CLEARED in s.conf&#x000a;        !((s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True)&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_ROLL_Select + &#x000a;                FlightModes_LATERAL_ROLL_Clear&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_ROLL_Select + &#x000a;                FlightModes_LATERAL_ROLL_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_ROLL_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_ROLL_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_ROLL_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_ROLL_Select + &#x000a;                FlightModes_LATERAL_ROLL_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_LATERAL_ROLL_Clear&#x000a;    pred pre_FlightModes_LATERAL_ROLL_Clear[s:Snapshot] {&#x000a;        FlightModes_LATERAL_ROLL_SELECTED_ACTIVE in s.conf&#x000a;        (s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_LATERAL_ROLL_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_LATERAL_ROLL_SELECTED + {&#x000a;            FlightModes_LATERAL_ROLL_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_LATERAL_ROLL_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_LATERAL_ROLL_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_LATERAL_ROLL_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_LATERAL_ROLL_SELECTED &amp; s.conf) =&gt; exit_FlightModes_LATERAL_ROLL_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_LATERAL_ROLL_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_LATERAL_ROLL_Clear[s]&#x000a;        pos_FlightModes_LATERAL_ROLL_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_LATERAL_ROLL_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_LATERAL_ROLL_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_LATERAL_ROLL_SELECTED_ACTIVE in s.conf&#x000a;        (s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_LATERAL_ROLL_Select + &#x000a;                FlightModes_LATERAL_ROLL_Clear&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_LATERAL_ROLL_Select + &#x000a;                FlightModes_LATERAL_ROLL_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_LATERAL_ROLL_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_LATERAL_ROLL_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_LATERAL_ROLL_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_LATERAL_ROLL_Select + &#x000a;                FlightModes_LATERAL_ROLL_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VS_Select&#x000a;    pred pre_FlightModes_VERTICAL_VS_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VS_CLEARED in s.conf&#x000a;        {&#x000a;            (s.FlightModes_VS_Switch_Pressed) = True and (s.FlightModes_Overspeed) = False and (s.FlightModes_VAPPR_Active) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VS_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VS_CLEARED + {&#x000a;            FlightModes_VERTICAL_VS_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_VERTICAL_New_Vertical_Mode_Activated}, FlightModes_VERTICAL_VS_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_VERTICAL_New_Vertical_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_VERTICAL_New_Vertical_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_VS_SELECTED[s&apos;]&#x000a;        enter_FlightModes_VERTICAL_VS_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VS_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VS_Select[s]&#x000a;        pos_FlightModes_VERTICAL_VS_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VS_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VS_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VS_CLEARED in s.conf&#x000a;        {&#x000a;            (_s.FlightModes_VS_Switch_Pressed) = True and (_s.FlightModes_Overspeed) = False and (s.FlightModes_VAPPR_Active) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VS_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VS_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VS_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VS_Clear&#x000a;    pred pre_FlightModes_VERTICAL_VS_Clear[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_VS_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_VS_Switch_Pressed) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VS_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VS_SELECTED + {&#x000a;            FlightModes_VERTICAL_VS_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VS_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_VS_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_VS_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_VS_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_VS_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VS_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VS_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_VS_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VS_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VS_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_VS_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_VS_Switch_Pressed) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VS_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VS_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VS_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VS_NewVerticalModeActivated&#x000a;    pred pre_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VS_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VS_SELECTED + {&#x000a;            FlightModes_VERTICAL_VS_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VS_NewVerticalModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_VS_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_VS_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_VS_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_VS_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s]&#x000a;        pos_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VS_NewVerticalModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VS_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VS_NewVerticalModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VS_NewVerticalModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VS_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VS_Clear + &#x000a;                FlightModes_VERTICAL_VS_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_FLC_Select&#x000a;    pred pre_FlightModes_VERTICAL_FLC_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_FLC_CLEARED in s.conf&#x000a;        {&#x000a;            ((s.FlightModes_FLC_Switch_Pressed) = True and (s.FlightModes_VAPPR_Active) = False) or ((s.FlightModes_Overspeed) = True and (s.FlightModes_ALT_Active) = False and (s.FlightModes_ALTSEL_Active) = False)&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_FLC_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_FLC_CLEARED + {&#x000a;            FlightModes_VERTICAL_FLC_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_VERTICAL_New_Vertical_Mode_Activated}, FlightModes_VERTICAL_FLC_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_VERTICAL_New_Vertical_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_VERTICAL_New_Vertical_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_FLC_SELECTED[s&apos;]&#x000a;        enter_FlightModes_VERTICAL_FLC_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_FLC_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_FLC_Select[s]&#x000a;        pos_FlightModes_VERTICAL_FLC_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_FLC_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_FLC_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_FLC_CLEARED in s.conf&#x000a;        {&#x000a;            ((_s.FlightModes_FLC_Switch_Pressed) = True and (s.FlightModes_VAPPR_Active) = False) or ((_s.FlightModes_Overspeed) = True and (s.FlightModes_ALT_Active) = False and (s.FlightModes_ALTSEL_Active) = False)&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_FLC_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_FLC_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_FLC_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_FLC_Clear&#x000a;    pred pre_FlightModes_VERTICAL_FLC_Clear[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_FLC_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            ((s.FlightModes_FLC_Switch_Pressed) = True and (s.FlightModes_Overspeed) = False) or ((s.FlightModes_Overspeed) = False and (s.FlightModes_VS_Pitch_Wheel_Rotated) = True) or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_FLC_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_FLC_SELECTED + {&#x000a;            FlightModes_VERTICAL_FLC_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_FLC_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_FLC_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_FLC_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_FLC_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_FLC_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_FLC_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_FLC_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_FLC_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_FLC_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_FLC_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_FLC_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            ((_s.FlightModes_FLC_Switch_Pressed) = True and (_s.FlightModes_Overspeed) = False) or ((_s.FlightModes_Overspeed) = False and (_s.FlightModes_VS_Pitch_Wheel_Rotated) = True) or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_FLC_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_FLC_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_FLC_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;    pred pre_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_FLC_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_FLC_SELECTED + {&#x000a;            FlightModes_VERTICAL_FLC_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_FLC_NewVerticalModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_FLC_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_FLC_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_FLC_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_FLC_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s]&#x000a;        pos_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_FLC_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_FLC_Clear + &#x000a;                FlightModes_VERTICAL_FLC_Select + &#x000a;                FlightModes_VERTICAL_FLC_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALT_Select&#x000a;    pred pre_FlightModes_VERTICAL_ALT_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_ALT_CLEARED in s.conf&#x000a;        {&#x000a;            ((s.FlightModes_ALT_Switch_Pressed) = True and (s.FlightModes_VAPPR_Active) = False) or ((s.FlightModes_VAPPR_Active) = False and (s.FlightModes_ALTSEL_Target_Changed) = True and (s.FlightModes_ALTSEL_Track) = True)&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALT_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALT_CLEARED + {&#x000a;            FlightModes_VERTICAL_ALT_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_VERTICAL_New_Vertical_Mode_Activated}, FlightModes_VERTICAL_ALT_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_VERTICAL_New_Vertical_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_VERTICAL_New_Vertical_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_ALT_SELECTED[s&apos;]&#x000a;        enter_FlightModes_VERTICAL_ALT_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALT_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALT_Select[s]&#x000a;        pos_FlightModes_VERTICAL_ALT_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALT_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALT_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_ALT_CLEARED in s.conf&#x000a;        {&#x000a;            ((_s.FlightModes_ALT_Switch_Pressed) = True and (s.FlightModes_VAPPR_Active) = False) or ((s.FlightModes_VAPPR_Active) = False and (_s.FlightModes_ALTSEL_Target_Changed) = True and (s.FlightModes_ALTSEL_Track) = True)&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALT_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALT_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALT_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALT_Clear&#x000a;    pred pre_FlightModes_VERTICAL_ALT_Clear[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_ALT_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_ALT_Switch_Pressed) = True or (s.FlightModes_VS_Pitch_Wheel_Rotated) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALT_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALT_SELECTED + {&#x000a;            FlightModes_VERTICAL_ALT_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_ALT_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_ALT_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_ALT_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_ALT_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_ALT_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALT_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALT_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_ALT_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALT_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALT_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_ALT_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_ALT_Switch_Pressed) = True or (_s.FlightModes_VS_Pitch_Wheel_Rotated) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALT_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALT_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALT_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALT_NewVerticalModeActivated&#x000a;    pred pre_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_ALT_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALT_SELECTED + {&#x000a;            FlightModes_VERTICAL_ALT_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_ALT_NewVerticalModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_ALT_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_ALT_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_ALT_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_ALT_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s]&#x000a;        pos_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_ALT_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALT_NewVerticalModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALT_NewVerticalModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALT_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALT_Clear + &#x000a;                FlightModes_VERTICAL_ALT_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALTSEL_Select&#x000a;    pred pre_FlightModes_VERTICAL_ALTSEL_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_ALTSEL_CLEARED in s.conf&#x000a;        {&#x000a;            (s.FlightModes_VAPPR_Active) = False and (s.FlightModes_VGA_Active) = False and (s.FlightModes_ALT_Active) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALTSEL_CLEARED + {&#x000a;            FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_ALTSEL_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_ALTSEL_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Select[s]&#x000a;        pos_FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_ALTSEL_CLEARED in s.conf&#x000a;        {&#x000a;            (s.FlightModes_VAPPR_Active) = False and (s.FlightModes_VGA_Active) = False and (s.FlightModes_ALT_Active) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALTSEL_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALTSEL_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALTSEL_Capture&#x000a;    pred pre_FlightModes_VERTICAL_ALTSEL_Capture[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED in s.conf&#x000a;        (s.FlightModes_ALTSEL_Capture_Condition_Met) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED + {&#x000a;            FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_VERTICAL_New_Vertical_Mode_Activated}, FlightModes_VERTICAL_ALTSEL_Capture] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_VERTICAL_New_Vertical_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_VERTICAL_New_Vertical_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Capture[s]&#x000a;        pos_FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Capture[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_ALTSEL_SELECTED_ARMED in s.conf&#x000a;        (_s.FlightModes_ALTSEL_Capture_Condition_Met) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALTSEL_Capture&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALTSEL_Capture&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALTSEL_Track&#x000a;    pred pre_FlightModes_VERTICAL_ALTSEL_Track[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE in s.conf&#x000a;        (s.FlightModes_ALTSEL_Track_Condition_Met) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE + {&#x000a;            FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_ALTSEL_Track] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Track[s]&#x000a;        pos_FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Track[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_CAPTURE in s.conf&#x000a;        (_s.FlightModes_ALTSEL_Track_Condition_Met) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALTSEL_Track&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALTSEL_Track&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALTSEL_Clear&#x000a;    pred pre_FlightModes_VERTICAL_ALTSEL_Clear[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALTSEL_SELECTED + {&#x000a;            FlightModes_VERTICAL_ALTSEL_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_ALTSEL_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE[s&apos;]&#x000a;        FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK in s.conf =&gt; exit_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK[s&apos;]&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_ALTSEL_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALTSEL_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALTSEL_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s]&#x000a;        !pre_FlightModes_VERTICAL_ALTSEL_Capture[s]&#x000a;        !pre_FlightModes_VERTICAL_ALTSEL_Track[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated&#x000a;    pred pre_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE &amp; s.conf)&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_ALTSEL_SELECTED + {&#x000a;            FlightModes_VERTICAL_ALTSEL_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE[s&apos;]&#x000a;        FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK in s.conf =&gt; exit_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK[s&apos;]&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_ALTSEL_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s]&#x000a;        pos_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE &amp; s.conf)&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_ALTSEL_Clear + &#x000a;                FlightModes_VERTICAL_ALTSEL_Select + &#x000a;                FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_ALTSEL_Capture + &#x000a;                FlightModes_VERTICAL_ALTSEL_Track&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_ALTSEL_Track[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VAPPR_Select&#x000a;    pred pre_FlightModes_VERTICAL_VAPPR_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VAPPR_CLEARED in s.conf&#x000a;        (s.FlightModes_APPR_Switch_Pressed) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VAPPR_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VAPPR_CLEARED + {&#x000a;            FlightModes_VERTICAL_VAPPR_SELECTED_ARMED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VAPPR_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_VAPPR_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VAPPR_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VAPPR_Select[s]&#x000a;        pos_FlightModes_VERTICAL_VAPPR_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VAPPR_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VAPPR_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VAPPR_CLEARED in s.conf&#x000a;        (_s.FlightModes_APPR_Switch_Pressed) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VAPPR_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VAPPR_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VAPPR_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VAPPR_Capture&#x000a;    pred pre_FlightModes_VERTICAL_VAPPR_Capture[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VAPPR_SELECTED_ARMED in s.conf&#x000a;        {&#x000a;            (s.FlightModes_VAPPR_Capture_Condition_Met) = True and (s.FlightModes_LAPPR_Active) = True and (s.FlightModes_Overspeed) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VAPPR_SELECTED_ARMED + {&#x000a;            FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_VERTICAL_New_Vertical_Mode_Activated}, FlightModes_VERTICAL_VAPPR_Capture] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_VERTICAL_New_Vertical_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_VERTICAL_New_Vertical_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VAPPR_Capture[s]&#x000a;        pos_FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VAPPR_Capture[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VAPPR_SELECTED_ARMED in s.conf&#x000a;        {&#x000a;            (_s.FlightModes_VAPPR_Capture_Condition_Met) = True and (s.FlightModes_LAPPR_Active) = True and (_s.FlightModes_Overspeed) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Capture&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Capture&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VAPPR_Capture&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VAPPR_Capture&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Capture&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VAPPR_Clear&#x000a;    pred pre_FlightModes_VERTICAL_VAPPR_Clear[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_VAPPR_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_APPR_Switch_Pressed) = True or (s.FlightModes_LAPPR_Selected) = False or (s.FlightModes_Selected_NAV_Source_Changed) = True or (s.FlightModes_Selected_NAV_Frequency_Changed) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VAPPR_SELECTED + {&#x000a;            FlightModes_VERTICAL_VAPPR_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VAPPR_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_VAPPR_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_VAPPR_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VAPPR_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VAPPR_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_VAPPR_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_APPR_Switch_Pressed) = True or (s.FlightModes_LAPPR_Selected) = False or (_s.FlightModes_Selected_NAV_Source_Changed) = True or (_s.FlightModes_Selected_NAV_Frequency_Changed) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VAPPR_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VAPPR_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_VAPPR_Capture[s]&#x000a;        !pre_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;    pred pre_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VAPPR_SELECTED + {&#x000a;            FlightModes_VERTICAL_VAPPR_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_VAPPR_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_VAPPR_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s]&#x000a;        pos_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VAPPR_Clear + &#x000a;                FlightModes_VERTICAL_VAPPR_Capture + &#x000a;                FlightModes_VERTICAL_VAPPR_Select + &#x000a;                FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VGA_Select&#x000a;    pred pre_FlightModes_VERTICAL_VGA_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VGA_CLEARED in s.conf&#x000a;        (s.FlightModes_GA_Switch_Pressed) = True and (s.FlightModes_Overspeed) = False&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VGA_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VGA_CLEARED + {&#x000a;            FlightModes_VERTICAL_VGA_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        testIfNextStable[s, s&apos;, {FlightModes_VERTICAL_New_Vertical_Mode_Activated}, FlightModes_VERTICAL_VGA_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {FlightModes_VERTICAL_New_Vertical_Mode_Activated})&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - {{FlightModes_VERTICAL_New_Vertical_Mode_Activated} + (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {FlightModes_VERTICAL_New_Vertical_Mode_Activated}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_VGA_SELECTED[s&apos;]&#x000a;        enter_FlightModes_VERTICAL_VGA_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VGA_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VGA_Select[s]&#x000a;        pos_FlightModes_VERTICAL_VGA_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VGA_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VGA_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VGA_CLEARED in s.conf&#x000a;        (_s.FlightModes_GA_Switch_Pressed) = True and (_s.FlightModes_Overspeed) = False&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VGA_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VGA_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VGA_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VGA_Clear&#x000a;    pred pre_FlightModes_VERTICAL_VGA_Clear[s:Snapshot] {&#x000a;        (some FlightModes_VERTICAL_VGA_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (s.FlightModes_When_AP_Engaged) = True or (s.FlightModes_SYNC_Switch_Pressed) = True or (s.FlightModes_VS_Pitch_Wheel_Rotated) = True or (s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VGA_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VGA_SELECTED + {&#x000a;            FlightModes_VERTICAL_VGA_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VGA_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_VGA_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_VGA_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_VGA_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_VGA_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VGA_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VGA_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_VGA_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VGA_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VGA_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        (some FlightModes_VERTICAL_VGA_SELECTED &amp; s.conf)&#x000a;        {&#x000a;            (_s.FlightModes_When_AP_Engaged) = True or (_s.FlightModes_SYNC_Switch_Pressed) = True or (_s.FlightModes_VS_Pitch_Wheel_Rotated) = True or (_s.FlightModes_Pilot_Flying_Transfer) = True or (s.FlightModes_Modes_On) = False&#x000a;        }&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VGA_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VGA_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VGA_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        }&#x000a;        // Priority &quot;SOURCE-PARENT&quot; semantics&#x000a;        !pre_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s]&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_VGA_NewVerticalModeActivated&#x000a;    pred pre_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_VGA_SELECTED_ACTIVE in s.conf&#x000a;        s.stable = True =&gt; {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in (s.events &amp; EnvironmentEvent)&#x000a;        } else {&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in s.events&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_VGA_SELECTED + {&#x000a;            FlightModes_VERTICAL_VGA_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_VGA_NewVerticalModeActivated] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_VGA_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_VGA_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_VGA_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_VGA_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s]&#x000a;        pos_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_VGA_SELECTED_ACTIVE in s.conf&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {(_s.events &amp; EnvironmentEvent)  + genEvents}&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;            FlightModes_VERTICAL_New_Vertical_Mode_Activated in {_s.events  + genEvents}&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_VGA_NewVerticalModeActivated&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_VGA_NewVerticalModeActivated&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_VGA_Clear + &#x000a;                FlightModes_VERTICAL_VGA_NewVerticalModeActivated + &#x000a;                FlightModes_VERTICAL_VGA_Select&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_PITCH_Select&#x000a;    pred pre_FlightModes_VERTICAL_PITCH_Select[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_PITCH_CLEARED in s.conf&#x000a;        !((s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True)&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_PITCH_Select[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_PITCH_CLEARED + {&#x000a;            FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_PITCH_Select] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        enter_FlightModes_VERTICAL_PITCH_SELECTED[s&apos;]&#x000a;        enter_FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_PITCH_Select[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_PITCH_Select[s]&#x000a;        pos_FlightModes_VERTICAL_PITCH_Select[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_PITCH_Select[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_PITCH_Select[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_PITCH_CLEARED in s.conf&#x000a;        !((s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True)&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_PITCH_Select + &#x000a;                FlightModes_VERTICAL_PITCH_Clear&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_PITCH_Select + &#x000a;                FlightModes_VERTICAL_PITCH_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_PITCH_Select[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_PITCH_Select&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_PITCH_Select&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_PITCH_Select + &#x000a;                FlightModes_VERTICAL_PITCH_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;    // Transition FlightModes_VERTICAL_PITCH_Clear&#x000a;    pred pre_FlightModes_VERTICAL_PITCH_Clear[s:Snapshot] {&#x000a;        FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE in s.conf&#x000a;        (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True&#x000a;    }&#x000a;&#x000a;    pred pos_FlightModes_VERTICAL_PITCH_Clear[s, s&apos;:Snapshot] {&#x000a;        s&apos;.conf = s.conf - FlightModes_VERTICAL_PITCH_SELECTED + {&#x000a;            FlightModes_VERTICAL_PITCH_CLEARED&#x000a;        }&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        testIfNextStable[s, s&apos;, {none}, FlightModes_VERTICAL_PITCH_Clear] =&gt; {&#x000a;            s&apos;.stable = True&#x000a;            s.stable = True =&gt; {&#x000a;                no ((s&apos;.events &amp; InternalEvent) )&#x000a;            } else {&#x000a;                no ((s&apos;.events &amp; InternalEvent) - { (InternalEvent &amp; s.events)})&#x000a;            }&#x000a;        } else {&#x000a;            s&apos;.stable = False&#x000a;            s.stable = True =&gt; {&#x000a;                s&apos;.events &amp; InternalEvent = {none}&#x000a;                s&apos;.events &amp; EnvironmentEvent = s.events &amp; EnvironmentEvent&#x000a;            } else {&#x000a;                s&apos;.events = s.events + {none}&#x000a;            }&#x000a;    &#x000a;            s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;            s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;            s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;            s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;            s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;            s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;            s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;            s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;            s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;            s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;            s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;            s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;            s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;            s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;            s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;            s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;            s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;            s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;            s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;            s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;        }&#x000a;        FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE in s.conf =&gt; exit_FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE[s&apos;]&#x000a;        (some FlightModes_VERTICAL_PITCH_SELECTED &amp; s.conf) =&gt; exit_FlightModes_VERTICAL_PITCH_SELECTED[s&apos;]&#x000a;    }&#x000a;&#x000a;    pred FlightModes_VERTICAL_PITCH_Clear[s, s&apos;: Snapshot] {&#x000a;        pre_FlightModes_VERTICAL_PITCH_Clear[s]&#x000a;        pos_FlightModes_VERTICAL_PITCH_Clear[s, s&apos;]&#x000a;        semantics_FlightModes_VERTICAL_PITCH_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred enabledAfterStep_FlightModes_VERTICAL_PITCH_Clear[_s, s: Snapshot, t: TransitionLabel, genEvents: set InternalEvent] {&#x000a;        // Preconditions&#x000a;        FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE in s.conf&#x000a;        (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True&#x000a;        _s.stable = True =&gt; {&#x000a;            no t &amp; {&#x000a;                FlightModes_VERTICAL_PITCH_Select + &#x000a;                FlightModes_VERTICAL_PITCH_Clear&#x000a;            }&#x000a;        } else {&#x000a;            no {_s.taken + t} &amp; {&#x000a;                FlightModes_VERTICAL_PITCH_Select + &#x000a;                FlightModes_VERTICAL_PITCH_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;    pred semantics_FlightModes_VERTICAL_PITCH_Clear[s, s&apos;: Snapshot] {&#x000a;        (s.stable = True) =&gt; {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = FlightModes_VERTICAL_PITCH_Clear&#x000a;        } else {&#x000a;            // SINGLE semantics&#x000a;            s&apos;.taken = s.taken + FlightModes_VERTICAL_PITCH_Clear&#x000a;            // Bigstep &quot;TAKE_ONE&quot; semantics&#x000a;            no s.taken &amp; {&#x000a;                FlightModes_VERTICAL_PITCH_Select + &#x000a;                FlightModes_VERTICAL_PITCH_Clear&#x000a;            }&#x000a;        }&#x000a;    }&#x000a;&#x000a;/****************************** ENTER PREDICATES *******************************/&#x000a;&#x000a;    pred enter_FlightModes_FD_ON[s: Snapshot] {&#x000a;        (s.FlightModes_FD_On) = True&#x000a;    }&#x000a;    pred enter_FlightModes_ANNUNCIATIONS_OFF[s: Snapshot] {&#x000a;        (s.FlightModes_Modes_On) = False&#x000a;    }&#x000a;    pred enter_FlightModes_ANNUNCIATIONS_ON[s: Snapshot] {&#x000a;        (s.FlightModes_Modes_On) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_HDG_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_HDG_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_HDG_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_HDG_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_NAV_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_NAV_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_NAV_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_NAV_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_LAPPR_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_LAPPR_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_LAPPR_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_LGA_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_LGA_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_LGA_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_LGA_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_ROLL_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_ROLL_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_LATERAL_ROLL_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_ROLL_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_VS_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_VS_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_VS_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_VS_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_FLC_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_FLC_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_FLC_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_FLC_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_ALT_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_ALT_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_ALT_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_ALT_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK[s: Snapshot] {&#x000a;        (s.FlightModes_ALTSEL_Track) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_ALTSEL_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_ALTSEL_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_ALTSEL_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_VAPPR_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_VAPPR_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_VAPPR_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_VGA_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_VGA_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_VGA_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_VGA_Selected) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_PITCH_Active) = True&#x000a;    }&#x000a;    pred enter_FlightModes_VERTICAL_PITCH_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_PITCH_Selected) = True&#x000a;    }&#x000a;&#x000a;/****************************** EXIT PREDICATES *******************************/&#x000a;&#x000a;    pred exit_FlightModes_FD_ON[s: Snapshot] {&#x000a;        (s.FlightModes_FD_On) = False&#x000a;    }&#x000a;    pred exit_FlightModes_ANNUNCIATIONS_OFF[s: Snapshot] {&#x000a;        (s.FlightModes_Modes_On) = True&#x000a;    }&#x000a;    pred exit_FlightModes_ANNUNCIATIONS_ON[s: Snapshot] {&#x000a;        (s.FlightModes_Modes_On) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_HDG_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_HDG_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_HDG_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_HDG_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_NAV_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_NAV_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_NAV_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_NAV_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_LAPPR_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_LAPPR_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_LAPPR_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_LGA_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_LGA_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_LGA_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_LGA_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_ROLL_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_ROLL_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_LATERAL_ROLL_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_ROLL_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_VS_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_VS_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_VS_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_VS_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_FLC_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_FLC_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_FLC_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_FLC_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_ALT_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_ALT_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_ALT_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_ALT_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE_TRACK[s: Snapshot] {&#x000a;        (s.FlightModes_ALTSEL_Track) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_ALTSEL_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_ALTSEL_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_ALTSEL_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_ALTSEL_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_VAPPR_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_VAPPR_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_VAPPR_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_VAPPR_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_VGA_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_VGA_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_VGA_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_VGA_Selected) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE[s: Snapshot] {&#x000a;        (s.FlightModes_PITCH_Active) = False&#x000a;    }&#x000a;    pred exit_FlightModes_VERTICAL_PITCH_SELECTED[s: Snapshot] {&#x000a;        (s.FlightModes_PITCH_Selected) = False&#x000a;    }&#x000a;/****************************** INITIAL CONDITIONS ****************************/&#x000a;    pred init[s: Snapshot] {&#x000a;        s.conf = {&#x000a;            FlightModes_FD_OFF + &#x000a;            FlightModes_ANNUNCIATIONS_OFF + &#x000a;            FlightModes_LATERAL_HDG_CLEARED + &#x000a;            FlightModes_LATERAL_NAV_CLEARED + &#x000a;            FlightModes_LATERAL_LAPPR_CLEARED + &#x000a;            FlightModes_LATERAL_LGA_CLEARED + &#x000a;            FlightModes_LATERAL_ROLL_SELECTED + &#x000a;            FlightModes_LATERAL_ROLL_SELECTED_ACTIVE + &#x000a;            FlightModes_VERTICAL_VS_CLEARED + &#x000a;            FlightModes_VERTICAL_FLC_CLEARED + &#x000a;            FlightModes_VERTICAL_ALT_CLEARED + &#x000a;            FlightModes_VERTICAL_ALTSEL_CLEARED + &#x000a;            FlightModes_VERTICAL_VAPPR_CLEARED + &#x000a;            FlightModes_VERTICAL_VGA_CLEARED + &#x000a;            FlightModes_VERTICAL_PITCH_SELECTED + &#x000a;            FlightModes_VERTICAL_PITCH_SELECTED_ACTIVE&#x000a;        }&#x000a;        no s.taken&#x000a;        s.stable = True&#x000a;        no s.events &amp; InternalEvent&#x000a;        // Model specific constraints&#x000a;        (s.FlightModes_FD_On) = False&#x000a;            (s.FlightModes_Modes_On) = False&#x000a;            (s.FlightModes_HDG_Selected) = False&#x000a;            (s.FlightModes_HDG_Active) = False&#x000a;            (s.FlightModes_NAV_Selected) = False&#x000a;            (s.FlightModes_NAV_Active) = False&#x000a;            (s.FlightModes_VS_Active) = False&#x000a;            (s.FlightModes_LAPPR_Selected) = False&#x000a;            (s.FlightModes_LAPPR_Active) = False&#x000a;            (s.FlightModes_LGA_Selected) = False&#x000a;            (s.FlightModes_LGA_Active) = False&#x000a;            (s.FlightModes_ROLL_Active) = True&#x000a;            (s.FlightModes_ROLL_Selected) = True&#x000a;            (s.FlightModes_VS_Selected) = False&#x000a;            (s.FlightModes_FLC_Selected) = False&#x000a;            (s.FlightModes_FLC_Active) = False&#x000a;            (s.FlightModes_ALT_Active) = False&#x000a;            (s.FlightModes_ALTSEL_Active) = False&#x000a;            (s.FlightModes_ALT_Selected) = False&#x000a;            (s.FlightModes_ALTSEL_Track) = False&#x000a;            (s.FlightModes_ALTSEL_Selected) = False&#x000a;            (s.FlightModes_PITCH_Selected) = True&#x000a;            (s.FlightModes_VAPPR_Selected) = False&#x000a;            (s.FlightModes_VAPPR_Active) = False&#x000a;            (s.FlightModes_VGA_Selected) = False&#x000a;            (s.FlightModes_VGA_Active) = False&#x000a;            (s.FlightModes_PITCH_Active) = True&#x000a;            (s.FlightModes_Independent_Mode) = False&#x000a;            (s.FlightModes_Active_Side) = False&#x000a;    }&#x000a;&#x000a;/**************************** SIGNIFICANCE AXIOMS *****************************/&#x000a;    /** Uncomment the operationsAxiom to find a significant scope. */&#x000a;    pred significance {&#x000a;        steps/reachabilityAxiom&#x000a;        // operationsAxiom&#x000a;    }&#x000a;    run significance for 9 Snapshot, 2 EventLabel&#x000a;        expect 1&#x000a;&#x000a;    pred operationsAxiom {&#x000a;        some s, s&apos;: Snapshot | FlightModes_FD_TurnFDOn[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_FD_TurnFDOff[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_HDG_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_HDG_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_NAV_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_NAV_Capture[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_NAV_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LAPPR_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LAPPR_Capture[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LAPPR_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LGA_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LGA_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_ROLL_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_LATERAL_ROLL_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VS_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VS_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_FLC_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_FLC_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALT_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALT_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VAPPR_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VGA_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VGA_Clear[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_PITCH_Select[s, s&apos;]&#x000a;        some s, s&apos;: Snapshot | FlightModes_VERTICAL_PITCH_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;/***************************** MODEL DEFINITION *******************************/&#x000a;    pred operation[s, s&apos;: Snapshot] {&#x000a;        FlightModes_FD_TurnFDOn[s, s&apos;] or&#x000a;        FlightModes_FD_TurnFDOff[s, s&apos;] or&#x000a;        FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;] or&#x000a;        FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;] or&#x000a;        FlightModes_LATERAL_HDG_Select[s, s&apos;] or&#x000a;        FlightModes_LATERAL_HDG_Clear[s, s&apos;] or&#x000a;        FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;] or&#x000a;        FlightModes_LATERAL_NAV_Select[s, s&apos;] or&#x000a;        FlightModes_LATERAL_NAV_Capture[s, s&apos;] or&#x000a;        FlightModes_LATERAL_NAV_Clear[s, s&apos;] or&#x000a;        FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LAPPR_Select[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LAPPR_Capture[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LAPPR_Clear[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LGA_Select[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LGA_Clear[s, s&apos;] or&#x000a;        FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;] or&#x000a;        FlightModes_LATERAL_ROLL_Select[s, s&apos;] or&#x000a;        FlightModes_LATERAL_ROLL_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VS_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VS_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_FLC_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_FLC_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALT_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALT_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VAPPR_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VGA_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VGA_Clear[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_PITCH_Select[s, s&apos;] or&#x000a;        FlightModes_VERTICAL_PITCH_Clear[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred small_step[s, s&apos;: Snapshot] {&#x000a;        operation[s, s&apos;]&#x000a;    }&#x000a;&#x000a;    pred testIfNextStable[s, s&apos;: Snapshot, genEvents: set InternalEvent, t:TransitionLabel] {&#x000a;        !enabledAfterStep_FlightModes_FD_TurnFDOn[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_FD_TurnFDOff[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_HDG_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_HDG_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_HDG_NewLateralModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_NAV_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_NAV_Capture[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_NAV_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_NAV_NewLateralModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LAPPR_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LAPPR_Capture[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LAPPR_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LGA_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LGA_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_LGA_NewLateralModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_ROLL_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_LATERAL_ROLL_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VS_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VS_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_FLC_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_FLC_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALT_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALT_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Capture[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Track[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALTSEL_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VAPPR_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VAPPR_Capture[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VAPPR_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VGA_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VGA_Clear[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_PITCH_Select[s, s&apos;, t, genEvents]&#x000a;        !enabledAfterStep_FlightModes_VERTICAL_PITCH_Clear[s, s&apos;, t, genEvents]&#x000a;    }&#x000a;&#x000a;    pred isEnabled[s:Snapshot] {&#x000a;        pre_FlightModes_FD_TurnFDOn[s]or&#x000a;        pre_FlightModes_FD_TurnFDOff[s]or&#x000a;        pre_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOn[s]or&#x000a;        pre_FlightModes_ANNUNCIATIONS_TurnAnnunciationsOff[s]or&#x000a;        pre_FlightModes_LATERAL_HDG_Select[s]or&#x000a;        pre_FlightModes_LATERAL_HDG_Clear[s]or&#x000a;        pre_FlightModes_LATERAL_HDG_NewLateralModeActivated[s]or&#x000a;        pre_FlightModes_LATERAL_NAV_Select[s]or&#x000a;        pre_FlightModes_LATERAL_NAV_Capture[s]or&#x000a;        pre_FlightModes_LATERAL_NAV_Clear[s]or&#x000a;        pre_FlightModes_LATERAL_NAV_NewLateralModeActivated[s]or&#x000a;        pre_FlightModes_LATERAL_LAPPR_Select[s]or&#x000a;        pre_FlightModes_LATERAL_LAPPR_Capture[s]or&#x000a;        pre_FlightModes_LATERAL_LAPPR_Clear[s]or&#x000a;        pre_FlightModes_LATERAL_LAPPR_NewLateralModeActivated[s]or&#x000a;        pre_FlightModes_LATERAL_LGA_Select[s]or&#x000a;        pre_FlightModes_LATERAL_LGA_Clear[s]or&#x000a;        pre_FlightModes_LATERAL_LGA_NewLateralModeActivated[s]or&#x000a;        pre_FlightModes_LATERAL_ROLL_Select[s]or&#x000a;        pre_FlightModes_LATERAL_ROLL_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_VS_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_VS_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_VS_NewVerticalModeActivated[s]or&#x000a;        pre_FlightModes_VERTICAL_FLC_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_FLC_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_FLC_NewVerticalModeActivated[s]or&#x000a;        pre_FlightModes_VERTICAL_ALT_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_ALT_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_ALT_NewVerticalModeActivated[s]or&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Capture[s]or&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Track[s]or&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_ALTSEL_NewVerticalModeActivated[s]or&#x000a;        pre_FlightModes_VERTICAL_VAPPR_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_VAPPR_Capture[s]or&#x000a;        pre_FlightModes_VERTICAL_VAPPR_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_VAPPR_NewVerticalModeActivated[s]or&#x000a;        pre_FlightModes_VERTICAL_VGA_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_VGA_Clear[s]or&#x000a;        pre_FlightModes_VERTICAL_VGA_NewVerticalModeActivated[s]or&#x000a;        pre_FlightModes_VERTICAL_PITCH_Select[s]or&#x000a;        pre_FlightModes_VERTICAL_PITCH_Clear[s]&#x000a;    }&#x000a;&#x000a;    pred equals[s, s&apos;: Snapshot] {&#x000a;        s&apos;.conf = s.conf&#x000a;        s&apos;.events = s.events&#x000a;        s&apos;.taken = s.taken&#x000a;        // Model specific declarations&#x000a;        s&apos;.FlightModes_Active_Side = s.FlightModes_Active_Side&#x000a;        s&apos;.FlightModes_FD_On = s.FlightModes_FD_On&#x000a;        s&apos;.FlightModes_ALTSEL_Selected = s.FlightModes_ALTSEL_Selected&#x000a;        s&apos;.FlightModes_Is_AP_Engaged = s.FlightModes_Is_AP_Engaged&#x000a;        s&apos;.FlightModes_VS_Pitch_Wheel_Rotated = s.FlightModes_VS_Pitch_Wheel_Rotated&#x000a;        s&apos;.FlightModes_FLC_Active = s.FlightModes_FLC_Active&#x000a;        s&apos;.FlightModes_LGA_Active = s.FlightModes_LGA_Active&#x000a;        s&apos;.FlightModes_ALT_Switch_Pressed = s.FlightModes_ALT_Switch_Pressed&#x000a;        s&apos;.FlightModes_ALT_Selected = s.FlightModes_ALT_Selected&#x000a;        s&apos;.FlightModes_LGA_Selected = s.FlightModes_LGA_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Selected = s.FlightModes_VAPPR_Selected&#x000a;        s&apos;.FlightModes_Pilot_Flying_Side = s.FlightModes_Pilot_Flying_Side&#x000a;        s&apos;.FlightModes_VS_Selected = s.FlightModes_VS_Selected&#x000a;        s&apos;.FlightModes_FLC_Selected = s.FlightModes_FLC_Selected&#x000a;        s&apos;.FlightModes_Selected_NAV_Source_Changed = s.FlightModes_Selected_NAV_Source_Changed&#x000a;        s&apos;.FlightModes_Overspeed = s.FlightModes_Overspeed&#x000a;        s&apos;.FlightModes_ROLL_Selected = s.FlightModes_ROLL_Selected&#x000a;        s&apos;.FlightModes_GA_Switch_Pressed = s.FlightModes_GA_Switch_Pressed&#x000a;        s&apos;.FlightModes_ALT_Active = s.FlightModes_ALT_Active&#x000a;        s&apos;.FlightModes_When_AP_Engaged = s.FlightModes_When_AP_Engaged&#x000a;        s&apos;.FlightModes_APPR_Switch_Pressed = s.FlightModes_APPR_Switch_Pressed&#x000a;        s&apos;.FlightModes_HDG_Active = s.FlightModes_HDG_Active&#x000a;        s&apos;.FlightModes_LAPPR_Selected = s.FlightModes_LAPPR_Selected&#x000a;        s&apos;.FlightModes_ALTSEL_Track = s.FlightModes_ALTSEL_Track&#x000a;        s&apos;.FlightModes_HDG_Selected = s.FlightModes_HDG_Selected&#x000a;        s&apos;.FlightModes_FLC_Switch_Pressed = s.FlightModes_FLC_Switch_Pressed&#x000a;        s&apos;.FlightModes_ALTSEL_Active = s.FlightModes_ALTSEL_Active&#x000a;        s&apos;.FlightModes_LAPPR_Capture_Condition_Met = s.FlightModes_LAPPR_Capture_Condition_Met&#x000a;        s&apos;.FlightModes_LAPPR_Active = s.FlightModes_LAPPR_Active&#x000a;        s&apos;.FlightModes_VGA_Selected = s.FlightModes_VGA_Selected&#x000a;        s&apos;.FlightModes_HDG_Switch_Pressed = s.FlightModes_HDG_Switch_Pressed&#x000a;        s&apos;.FlightModes_ROLL_Active = s.FlightModes_ROLL_Active&#x000a;        s&apos;.FlightModes_NAV_Capture_Condition_Met = s.FlightModes_NAV_Capture_Condition_Met&#x000a;        s&apos;.FlightModes_PITCH_Active = s.FlightModes_PITCH_Active&#x000a;        s&apos;.FlightModes_Is_Offside_FD_On = s.FlightModes_Is_Offside_FD_On&#x000a;        s&apos;.FlightModes_Independent_Mode = s.FlightModes_Independent_Mode&#x000a;        s&apos;.FlightModes_ALTSEL_Track_Condition_Met = s.FlightModes_ALTSEL_Track_Condition_Met&#x000a;        s&apos;.FlightModes_FD_Switch_Pressed = s.FlightModes_FD_Switch_Pressed&#x000a;        s&apos;.FlightModes_NAV_Selected = s.FlightModes_NAV_Selected&#x000a;        s&apos;.FlightModes_VAPPR_Active = s.FlightModes_VAPPR_Active&#x000a;        s&apos;.FlightModes_Pilot_Flying_Transfer = s.FlightModes_Pilot_Flying_Transfer&#x000a;        s&apos;.FlightModes_Modes_On = s.FlightModes_Modes_On&#x000a;        s&apos;.FlightModes_Selected_NAV_Frequency_Changed = s.FlightModes_Selected_NAV_Frequency_Changed&#x000a;        s&apos;.FlightModes_NAV_Switch_Pressed = s.FlightModes_NAV_Switch_Pressed&#x000a;        s&apos;.FlightModes_VAPPR_Capture_Condition_Met = s.FlightModes_VAPPR_Capture_Condition_Met&#x000a;        s&apos;.FlightModes_ALTSEL_Capture_Condition_Met = s.FlightModes_ALTSEL_Capture_Condition_Met&#x000a;        s&apos;.FlightModes_SYNC_Switch_Pressed = s.FlightModes_SYNC_Switch_Pressed&#x000a;        s&apos;.FlightModes_PITCH_Selected = s.FlightModes_PITCH_Selected&#x000a;        s&apos;.FlightModes_VS_Active = s.FlightModes_VS_Active&#x000a;        s&apos;.FlightModes_NAV_Active = s.FlightModes_NAV_Active&#x000a;        s&apos;.FlightModes_VS_Switch_Pressed = s.FlightModes_VS_Switch_Pressed&#x000a;        s&apos;.FlightModes_VGA_Active = s.FlightModes_VGA_Active&#x000a;        s&apos;.FlightModes_ALTSEL_Target_Changed = s.FlightModes_ALTSEL_Target_Changed&#x000a;    }&#x000a;&#x000a;    fact {&#x000a;        all s: Snapshot | s in initial iff init[s]&#x000a;        all s, s&apos;: Snapshot | s-&gt;s&apos; in nextStep iff small_step[s, s&apos;]&#x000a;        all s, s&apos;: Snapshot | equals[s, s&apos;] =&gt; s = s&apos;&#x000a;        all s: Snapshot | (isEnabled[s] &amp;&amp; no s&apos;: Snapshot | small_step[s, s&apos;]) =&gt; s.stable = False&#x000a;        all s: Snapshot | s.stable = False =&gt; some s.nextStep&#x000a;        // significance&#x000a;&#x0009;&#x0009;path&#x000a;    }&#x000a;&#x000a;    pred path {&#x000a;        all s:Snapshot, s&apos;: s.next | operation[s, s&apos;]&#x000a;&#x0009;&#x0009;init[first]&#x000a;    }&#x000a;    run path for 11 Snapshot, 2 EventLabel&#x000a;        expect 1&#x000a;&#x000a;/****************************** INVARIANTS ************************************/&#x000a;    fact FlightModes_EventProcessing {&#x000a;        all s: Snapshot | (some FlightModes &amp; s.conf) =&gt; {&#x000a;            (s.FlightModes_When_AP_Engaged) = (s.FlightModes_Is_AP_Engaged)&#x000a;        }&#x000a;    }&#x000a;    &#x000a;&#x000a;&#x000a;    assert ctl_At_Least_One_Lateral_Mode_Active  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; (((s.FlightModes_FD_On) = True or (s.FlightModes_Is_AP_Engaged) = True) =&gt; (s.FlightModes_ROLL_Active) = True or (s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True)}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_At_Least_One_Lateral_Mode_Active &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert At_Least_One_Lateral_Mode_Active {&#x000a;        all s: Snapshot | s.stable = True and (s.FlightModes_FD_On = True or s.FlightModes_Is_AP_Engaged = True) =&gt;&#x000a;            (&#x000a;                s.FlightModes_ROLL_Active = True or&#x000a;                s.FlightModes_HDG_Active = True or&#x000a;                s.FlightModes_NAV_Active = True or&#x000a;                s.FlightModes_LAPPR_Active = True or&#x000a;                s.FlightModes_LGA_Active = True&#x000a;            )&#x000a;    }&#x000a;    check At_Least_One_Lateral_Mode_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert ctl_at_Most_One_Lateral_Mode_Active  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; (((s.FlightModes_ROLL_Active) = True =&gt; !(((s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True))) and ((s.FlightModes_HDG_Active) = True =&gt; !(((s.FlightModes_ROLL_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True))) and ((s.FlightModes_NAV_Active) = True =&gt; !(((s.FlightModes_ROLL_Active) = True or (s.FlightModes_HDG_Active) = True or (s.FlightModes_LAPPR_Active) = True or (s.FlightModes_LGA_Active) = True))) and ((s.FlightModes_LAPPR_Active) = True =&gt; !(((s.FlightModes_ROLL_Active) = True or (s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LGA_Active) = True))) and ((s.FlightModes_LGA_Active) = True =&gt; !(((s.FlightModes_ROLL_Active) = True or (s.FlightModes_HDG_Active) = True or (s.FlightModes_NAV_Active) = True or (s.FlightModes_LAPPR_Active) = True))))}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_at_Most_One_Lateral_Mode_Active &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert At_Most_One_Lateral_Mode_Active {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            ((s.FlightModes_ROLL_Active = True =&gt;&#x000a;                !(s.FlightModes_HDG_Active = True or s.FlightModes_NAV_Active = True or&#x000a;                 s.FlightModes_LAPPR_Active = True or s.FlightModes_LGA_Active = True)) and&#x000a;            (s.FlightModes_HDG_Active = True =&gt;&#x000a;                !(s.FlightModes_ROLL_Active = True or s.FlightModes_NAV_Active = True or&#x000a;                 s.FlightModes_LAPPR_Active = True or s.FlightModes_LGA_Active = True)) and&#x000a;            (s.FlightModes_NAV_Active = True =&gt;&#x000a;                !(s.FlightModes_ROLL_Active = True or s.FlightModes_HDG_Active = True or&#x000a;                 s.FlightModes_LAPPR_Active = True or s.FlightModes_LGA_Active = True)) and&#x000a;            (s.FlightModes_LAPPR_Active = True =&gt;&#x000a;                !(s.FlightModes_ROLL_Active = True or s.FlightModes_HDG_Active = True or&#x000a;                 s.FlightModes_NAV_Active = True or s.FlightModes_LGA_Active = True)) and&#x000a;            (s.FlightModes_LGA_Active = True =&gt;&#x000a;                !(s.FlightModes_ROLL_Active = True or s.FlightModes_HDG_Active = True or&#x000a;                 s.FlightModes_NAV_Active = True or s.FlightModes_LAPPR_Active = True))&#x000a;        )&#x000a;    }&#x000a;    check At_Most_One_Lateral_Mode_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert ctl_exactly_One_Lateral_Mode_Active  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; one {&#x000a;            FlightModes_LATERAL_ROLL_SELECTED_ACTIVE + FlightModes_LATERAL_HDG_SELECTED_ACTIVE + FlightModes_LATERAL_NAV_SELECTED_ACTIVE + FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE + FlightModes_LATERAL_LGA_SELECTED_ACTIVE&#x000a;        }&#x000a;         &amp; s.conf}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_exactly_One_Lateral_Mode_Active &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert exactly_One_Lateral_Mode_Active {&#x000a;        all s: Snapshot |  s.stable = True =&gt; one {&#x000a;            FlightModes_LATERAL_ROLL_SELECTED_ACTIVE +&#x000a;            FlightModes_LATERAL_HDG_SELECTED_ACTIVE +&#x000a;            FlightModes_LATERAL_NAV_SELECTED_ACTIVE +&#x000a;            FlightModes_LATERAL_LAPPR_SELECTED_ACTIVE +&#x000a;            FlightModes_LATERAL_LGA_SELECTED_ACTIVE&#x000a;        } &amp; s.conf&#x000a;    }&#x000a;    check exactly_One_Lateral_Mode_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert ctl_At_Least_One_Vertical_Mode_Active  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; ((s.FlightModes_PITCH_Active) = True or (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True)}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_At_Least_One_Vertical_Mode_Active &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert At_Least_One_Vertical_Mode_Active {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            (s.FlightModes_PITCH_Active = True or s.FlightModes_VS_Active = True or&#x000a;            s.FlightModes_FLC_Active = True or s.FlightModes_ALT_Active = True or&#x000a;            s.FlightModes_ALTSEL_Active = True or s.FlightModes_VAPPR_Active = True or&#x000a;            s.FlightModes_VGA_Active = True)&#x000a;    }&#x000a;    check At_Least_One_Vertical_Mode_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert ctl_At_Most_One_Vertical_Mode_Active  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; (((s.FlightModes_PITCH_Active) = True =&gt; !(((s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True))) and ((s.FlightModes_VS_Active) = True =&gt; !(((s.FlightModes_PITCH_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True))) and ((s.FlightModes_FLC_Active) = True =&gt; !(((s.FlightModes_PITCH_Active) = True or (s.FlightModes_VS_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True))) and ((s.FlightModes_ALT_Active) = True =&gt; !(((s.FlightModes_PITCH_Active) = True or (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True))) and ((s.FlightModes_ALTSEL_Active) = True =&gt; !(((s.FlightModes_PITCH_Active) = True or (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True))) and ((s.FlightModes_VAPPR_Active) = True =&gt; !(((s.FlightModes_PITCH_Active) = True or (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VGA_Active) = True))) and ((s.FlightModes_VGA_Active) = True =&gt; !(((s.FlightModes_PITCH_Active) = True or (s.FlightModes_VS_Active) = True or (s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_VAPPR_Active) = True))))}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_At_Most_One_Vertical_Mode_Active &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert At_Most_One_Vertical_Mode_Active {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            ((s.FlightModes_PITCH_Active = True =&gt;&#x000a;                !(s.FlightModes_VS_Active = True or s.FlightModes_FLC_Active = True or&#x000a;                 s.FlightModes_ALT_Active = True or s.FlightModes_ALTSEL_Active = True or&#x000a;                 s.FlightModes_VAPPR_Active = True or s.FlightModes_VGA_Active = True)&#x000a;            ) and&#x000a;            (s.FlightModes_VS_Active = True =&gt;&#x000a;                !( s.FlightModes_PITCH_Active = True or s.FlightModes_FLC_Active = True or&#x000a;                    s.FlightModes_ALT_Active = True or s.FlightModes_ALTSEL_Active = True or&#x000a;                    s.FlightModes_VAPPR_Active = True or s.FlightModes_VGA_Active = True)&#x000a;            ) and&#x000a;            (s.FlightModes_FLC_Active = True =&gt;&#x000a;                !(s.FlightModes_PITCH_Active = True or s.FlightModes_VS_Active = True or&#x000a;                s.FlightModes_ALT_Active = True or s.FlightModes_ALTSEL_Active = True or&#x000a;                s.FlightModes_VAPPR_Active = True or s.FlightModes_VGA_Active = True)&#x000a;            ) and&#x000a;            (s.FlightModes_ALT_Active = True =&gt;&#x000a;                !(s.FlightModes_PITCH_Active = True or s.FlightModes_VS_Active = True or&#x000a;                s.FlightModes_FLC_Active = True or s.FlightModes_ALTSEL_Active = True or&#x000a;                s.FlightModes_VAPPR_Active = True or s.FlightModes_VGA_Active = True)&#x000a;            ) and&#x000a;            (s.FlightModes_ALTSEL_Active = True =&gt;&#x000a;                !(s.FlightModes_PITCH_Active = True or s.FlightModes_VS_Active = True or&#x000a;                s.FlightModes_FLC_Active = True or s.FlightModes_ALT_Active = True or&#x000a;                s.FlightModes_VAPPR_Active = True or s.FlightModes_VGA_Active = True)&#x000a;            ) and (&#x000a;            s.FlightModes_VAPPR_Active = True =&gt;&#x000a;                !(s.FlightModes_PITCH_Active = True or s.FlightModes_VS_Active = True or&#x000a;                s.FlightModes_FLC_Active = True or s.FlightModes_ALT_Active = True or&#x000a;                s.FlightModes_ALTSEL_Active = True or s.FlightModes_VGA_Active = True)&#x000a;            ) and (&#x000a;                s.FlightModes_VGA_Active = True =&gt;&#x000a;                !(s.FlightModes_PITCH_Active = True or s.FlightModes_VS_Active = True or&#x000a;                s.FlightModes_FLC_Active = True or s.FlightModes_ALT_Active = True or&#x000a;                s.FlightModes_ALTSEL_Active = True or s.FlightModes_VAPPR_Active = True)&#x000a;            ))&#x000a;    }&#x000a;    check At_Most_One_Vertical_Mode_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert ctl_ALTSEL_Selected_If_Not_ALT_VAPPR_VGA_Active  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; ((s.FlightModes_Modes_On) = True =&gt; !(((s.FlightModes_ALT_Active) = True or (s.FlightModes_VAPPR_Active) = True or (s.FlightModes_VGA_Active) = True)) =&gt; (s.FlightModes_ALTSEL_Selected) = True)}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_ALTSEL_Selected_If_Not_ALT_VAPPR_VGA_Active &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert ALTSEL_Selected_If_Not_ALT_VAPPR_VGA_Active {&#x000a;        all s: Snapshot | s.stable = True and s.FlightModes_Modes_On = True =&gt;&#x000a;            !(&#x000a;                s.FlightModes_ALT_Active = True or&#x000a;                s.FlightModes_VAPPR_Active = True or&#x000a;                s.FlightModes_VGA_Active = True)&#x000a;            =&gt;&#x000a;            s.FlightModes_ALTSEL_Selected = True&#x000a;    }&#x000a;    check ALTSEL_Selected_If_Not_ALT_VAPPR_VGA_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- FLC, ALT, ALTSEL, or PITCH mode shall be active&#x000a;    -- while an overspeed condition exists.&#x000a;    --------------------------------------------------------------------------------&#x000a;    &#x000a;    assert ctl_Overspeed_Implies_FLC_ALT_ALTSEL_PITCH  {&#x000a;        ctl_mc[ag[{ s: Snapshot | s.stable = True =&gt; ((s.FlightModes_Overspeed) = True =&gt; ((s.FlightModes_FLC_Active) = True or (s.FlightModes_ALT_Active) = True or (s.FlightModes_ALTSEL_Active) = True or (s.FlightModes_PITCH_Active) = True))}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_Overspeed_Implies_FLC_ALT_ALTSEL_PITCH &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert  Overspeed_Implies_FLC_ALT_ALTSEL_PITCH {&#x000a;        all s: Snapshot | s.stable = True =&gt; (&#x000a;            s.FlightModes_Overspeed = True =&gt;&#x000a;            (&#x000a;                s.FlightModes_FLC_Active = True or&#x000a;                s.FlightModes_ALT_Active = True or&#x000a;                s.FlightModes_ALTSEL_Active = True or&#x000a;                s.FlightModes_PITCH_Active = True&#x000a;            )&#x000a;        )&#x000a;    }&#x000a;    check Overspeed_Implies_FLC_ALT_ALTSEL_PITCH for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    assert ctl_Modes_Off_At_Startup {&#x000a;        ctl_mc[ag[&#x000a;            { s: Snapshot | init[s] =&gt; s.FlightModes_Modes_On = False }&#x000a;        ]]&#x000a;    }&#x000a;    check ctl_Modes_Off_At_Startup for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert check_Modes_Off_At_Startup {&#x000a;        all s: Snapshot | init[s] =&gt; s.FlightModes_Modes_On = False&#x000a;    }&#x000a;    check check_Modes_Off_At_Startup for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- The mode annunciations shall be on if the AP is engaged.&#x000a;    --&#x000a;    -- Notes: We use the contrapositive because it is easier to reason about outputs&#x000a;    -- on stable snapshots&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert AP_Engaged_Implies_Modes_On {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            s.FlightModes_Modes_On = False =&gt;&#x000a;            all _s: nextStep.s | _s.FlightModes_Is_AP_Engaged = False&#x000a;    }&#x000a;    check AP_Engaged_Implies_Modes_On for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    assert ctl_AP_Engaged_Implies_Modes_On  {&#x000a;        ctl_mc[ag[{ (imp_ctl[&#x000a;            {s: Snapshot | s.stable = True and (s.FlightModes_Is_AP_Engaged) = True},&#x000a;            (ax[au[&#x000a;                {s: Snapshot | s.stable = False},&#x000a;                {s: Snapshot | s.stable = True and (s.FlightModes_Modes_On) = True}&#x000a;            ]])&#x000a;        ])}]]&#x000a;    }&#x000a;    &#x000a;    check ctl_AP_Engaged_Implies_Modes_On &#x000a;        for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- The mode annunciations shall be on if the offside FD is on.&#x000a;    --&#x000a;    -- Notes: We use the contrapositive because it is easier to reason about outputs&#x000a;    -- on stable snapshots&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert Offside_FD_On_Implies_Modes_On {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            s.FlightModes_Modes_On = False =&gt;&#x000a;            all _s: nextStep.s | _s.FlightModes_Is_Offside_FD_On = False&#x000a;    }&#x000a;    check Offside_FD_On_Implies_Modes_On for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- The mode annunciations shall be on if the onside FD is on.&#x000a;    --&#x000a;    -- Notes: We use the contrapositive because it is easier to reason about outputs&#x000a;    -- on stable snapshots&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert Onside_FD_On_Implies_Modes_On {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            s.FlightModes_Modes_On = False =&gt;&#x000a;            all _s: nextStep.s | _s.FlightModes_FD_On = False&#x000a;    }&#x000a;    check Onside_FD_On_Implies_Modes_On for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- The onside FD shall be off at system start up&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert FD_Off_At_Startup {&#x000a;        all s: Snapshot | init[s] =&gt; s.FlightModes_FD_On = False&#x000a;    }&#x000a;    check FD_Off_At_Startup for 19 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- The onside FD shall turn on when the AP is engaged.&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert  AP_Engaged_Turns_FD_On {&#x000a;        // This property is weaker than it is required, we&apos;re proving that the rising&#x000a;        // Is_AP_Engaged will eventually turn the Modes On.&#x000a;        // This is because of how our nextStep relation is built and we don&apos;t have an&#x000a;        // easy way to refer to the next stable snapshot&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            rising[s, FlightModes_Is_AP_Engaged] =&gt; some s&apos;: s.*nextStep | s&apos;.stable = True and s&apos;.FlightModes_FD_On = True&#x000a;    }&#x000a;    check AP_Engaged_Turns_FD_On for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    pred rising[s: Snapshot, rel: Snapshot -&gt; one Bool] {&#x000a;        nextStep.s.rel = False and s.rel = True&#x000a;    }&#x000a;    --------------------------------------------------------------------------------&#x000a;    -- The onside FD shall be on when an overspeed condition exists.&#x000a;    --&#x000a;    -- Notes: We use the contrapositive because it is easier to reason about outputs&#x000a;    -- on stable snapshots.&#x000a;    -- Property fails because we have not implemented the event processing module&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert Overspeed_Implies_FD_On {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            s.FlightModes_FD_On = False =&gt;&#x000a;            all _s: nextStep.s | _s.FlightModes_Overspeed = False&#x000a;    }&#x000a;    check Overspeed_Implies_FD_On for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- ROLL mode shall be active if and only if ROLL mode is selected.&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert ROLL_Selected_Iff_ROLL_Active {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            (s.FlightModes_ROLL_Active = True iff s.FlightModes_ROLL_Selected = True)&#x000a;    }&#x000a;    check ROLL_Selected_Iff_ROLL_Active for 9 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;    &#x000a;    --------------------------------------------------------------------------------&#x000a;    -- ROLL mode shall be active iff no other lateral mode is active.&#x000a;    --&#x000a;    -- Notes: we ca check this property on the same snapshot because all variables&#x000a;    -- involved are controlled outputs and they do not change on stable snapshots&#x000a;    --------------------------------------------------------------------------------&#x000a;    assert Default_Lateral_Mode_Is_ROLL {&#x000a;        all s: Snapshot | s.stable = True =&gt;&#x000a;            (s.FlightModes_ROLL_Active = True iff&#x000a;            !(&#x000a;                s.FlightModes_HDG_Active = True or&#x000a;                s.FlightModes_NAV_Active = True or&#x000a;                s.FlightModes_LAPPR_Active = True or&#x000a;                s.FlightModes_LGA_Active = True&#x000a;            ))&#x000a;    }&#x000a;    check Default_Lateral_Mode_Is_ROLL for 11 Snapshot, exactly 2 EventLabel&#x000a;    &#x000a;&#x000a;"/>

<source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

<source filename="/$alloy4$/models/util/boolean.als" content="module util/boolean&#x000a;&#x000a;/*&#x000a; * Creates a Bool type with two singleton subtypes: True&#x000a; * and False. Provides common boolean operations.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;abstract sig Bool {}&#x000a;one sig True, False extends Bool {}&#x000a;&#x000a;pred isTrue[b: Bool] { b in True }&#x000a;&#x000a;pred isFalse[b: Bool] { b in False }&#x000a;&#x000a;fun Not[b: Bool] : Bool {&#x000a;  Bool - b&#x000a;}&#x000a;&#x000a;fun And[b1, b2: Bool] : Bool {&#x000a;  subset_[b1 + b2, True]&#x000a;}&#x000a;&#x000a;fun Or[b1, b2: Bool] : Bool {&#x000a;  subset_[True, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Xor[b1, b2: Bool] : Bool {&#x000a;  subset_[Bool, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Nand[b1, b2: Bool] : Bool {&#x000a;  subset_[False, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Nor[b1, b2: Bool] : Bool {&#x000a;  subset_[b1 + b2, False]&#x000a;}&#x000a;&#x000a;fun subset_[s1, s2: set Bool] : Bool {&#x000a;  (s1 in s2) =&gt; True else False&#x000a;}&#x000a;"/>

<source filename="/media/jis/TOSHIBA EXT/JIS/Estudio/UWaterloo/Research/Git/dash/Models/Optimisations/optimised/util/steps.als" content="/*******************************************************************************&#x000a; * Title: steps.als&#x000a; * Authors: Jose Serna - jserna@uwaterloo.ca&#x000a; *&#x000a; * Notes: This module helps defining step relations for transition systems.&#x000a; *        Several axioms are included to get a significant model.&#x000a; *&#x000a; ******************************************************************************/&#x000a;&#x000a;module steps[S]&#x000a;&#x000a;open ctl[S]&#x000a;&#x000a;    one sig Step {&#x000a;        initial: some S,&#x000a;        next_step: S -&gt; S,&#x000a;        equality:  S -&gt; S&#x000a;    }&#x000a;&#x000a;    // A snapshot is a set of control states, a variable evaluation, and a set&#x000a;    // of events.&#x000a;    abstract sig BaseSnapshot {&#x000a;        /** Label control states */&#x000a;        conf: set StateLabel,&#x000a;        /** Semantics consistency */&#x000a;        taken: set TransitionLabel&#x000a;    }&#x000a;&#x000a;    fact {&#x000a;        all s: S | s in BaseSnapshot&#x000a;        Step.next_step = nextState&#x000a;        Step.initial = initialState&#x000a;    }&#x000a;&#x000a;    // These functions must be defined by the calling code&#x000a;    /** Define the elements that represent the initial state of the system */&#x000a;    fun initial: S { Step.initial }&#x000a;    /** Define the next state relation */&#x000a;    fun nextStep: S -&gt; S { Step.next_step }&#x000a;    /** Define the criteria to consider two elements as equal */&#x000a;    fun equals: S-&gt;S { Step.equality }&#x000a;&#x000a;/****************************** EVENT SPACE ***********************************/&#x000a;    abstract sig EventLabel {}&#x000a;    abstract sig EnvironmentEvent, InternalEvent extends EventLabel {}&#x000a;&#x000a;/****************************** STATE SPACE ***********************************/&#x000a;    abstract sig StateLabel {}&#x000a;&#x000a;/***************************** TRANSITIONS ************************************/&#x000a;    abstract sig TransitionLabel {}&#x000a;&#x000a;/************************* Significance Axioms ********************************/&#x000a;&#x000a;    pred reachabilityAxiom {&#x000a;        all s : S | s in S .((Step.initial) &lt;: * (Step.next_step) )&#x000a;    }&#x000a;&#x000a;    pred equalityAxiom {&#x000a;        all s, s&apos;: S |  s-&gt;s&apos; in Step.equality =&gt; s = s&apos;&#x000a;    }&#x000a;&#x000a;    // The system is always in some state&#x000a;    assert check_some_conf {&#x000a;        ctl_mc[ag[{s: S | some s.conf}]]&#x000a;    }&#x000a;    check check_some_conf for 10 expect 0&#x000a;"/>

<source filename="/media/jis/TOSHIBA EXT/JIS/Estudio/UWaterloo/Research/Git/dash/Models/Optimisations/optimised/util/ctl.als" content="/*&#x000a;/*&#x000a; * Copyright (c) 2012, Amirhossein Vakili&#x000a; * All rights reserved.&#x000a; *&#x000a; * Redistribution and use in source and binary forms, with or without &#x000a; * modification, are permitted provided that the following conditions &#x000a; * are met:&#x000a; *&#x000a; *    1. Redistributions of source code must retain the above copyright&#x000a; *    notice, this list of conditions and the following disclaimer.&#x000a; *&#x000a; *    2. Redistributions in binary form must reproduce the above copyright &#x000a; *    notice, this list of conditions and the following disclaimer in the&#x000a; *    documentation and/or other materials provided with the distribution.&#x000a; *&#x000a; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#x000a; * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#x000a; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#x000a; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT &#x000a; * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#x000a; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#x000a; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#x000a; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#x000a; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#x000a; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#x000a; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#x000a; */&#x000a;&#x000a;module ctl[S]&#x000a;&#x000a;//********************KRIPKE STRUCTURE DEF*************************//&#x000a;&#x000a; one sig TS{&#x000a;    S0: some S,&#x000a;    sigma: S -&gt; S,&#x000a;}&#x000a;&#x000a;//********************MODEL SET UP FUNCTIONS*************************//&#x000a;// set by users in their model files&#x000a;&#x000a;fun initialState: some S {TS.S0}&#x000a;&#x000a;fun nextState: S -&gt; S {TS.sigma}&#x000a;&#x000a;//********************HELPER FUNCTIONS*************************//&#x000a;&#x000a;private fun bound[R: S -&gt; S, X: S]: S -&gt; S {X &lt;: R}&#x000a;private fun id[X:S]: S-&gt;S{bound[iden,X]}&#x000a;private fun loop[R: S -&gt; S]: S {S.(^R &amp; id[S])}&#x000a;--private fun loop[R: S -&gt; S]: S {{a:S | (a-&gt;a) in ^R}}&#x000a;&#x000a;//********************LOGICAL OPERATORS*************************//&#x000a;&#x000a;fun not_ctl[phi: S]: S {S - phi}&#x000a;fun and_ctl[phi, si: S]: S {phi &amp; si}&#x000a;fun or_ctl[phi, si: S]: S {phi + si}&#x000a;fun imp_ctl[phi, si: S]: S {not_ctl[phi] + si}&#x000a;&#x000a;//********************TEMPORAL OPERATORS*************************//&#x000a;&#x000a;fun ex[phi: S]: S {TS.sigma.phi}&#x000a;&#x000a;fun ax[phi:S]:S {not_ctl[ex[not_ctl[phi]]]}&#x000a;&#x000a;fun ef[phi: S]: S {(*(TS.sigma)).phi }&#x000a;&#x000a;fun eg[phi: S]: S { &#x000a;    let R= bound[TS.sigma,phi]|&#x000a;    let Loop = loop[R]|&#x000a;        (*R).Loop&#x000a;}&#x000a;&#x000a;fun af[phi: S]: S {not_ctl[eg[not_ctl[phi]]]}&#x000a;&#x000a;fun ag[phi: S]: S {not_ctl[ef[not_ctl[phi]]]}&#x000a;&#x000a;fun eu[phi, si: S]: S {(*(bound[TS.sigma, phi])).si}&#x000a;&#x000a;fun au[phi, si: S]: S {&#x000a;    not_ctl[&#x000a;        or_ctl[&#x000a;            eg[not_ctl[si]],&#x000a;            eu[&#x000a;                not_ctl[si],&#x000a;                not_ctl[or_ctl[phi, si]]&#x000a;            ]&#x000a;        ]&#x000a;    ]&#x000a;}&#x000a;&#x000a;//********************MODEL CHECKING CONSTRAINT*************************//&#x000a;// called by users for mc in their model file&#x000a;pred ctl_mc[phi: S]{TS.S0 in phi}&#x000a;"/>

<source filename="/$alloy4$/models/util/ordering.als" content="module util/ordering[exactly elem]&#x000a;&#x000a;/*&#x000a; * Creates a single linear ordering over the atoms in elem. It also constrains all&#x000a; * the atoms to exist that are permitted by the scope on elem. That is, if the scope&#x000a; * on a signature S is 5, opening util/ordering[S] will force S to have 5 elements&#x000a; * and create a linear ordering over those five elements. The predicates and&#x000a; * functions below provide access to properties of the linear ordering, such as&#x000a; * which element is first in the ordering, or whether a given element precedes&#x000a; * another. You cannotcreate multiple linear orderings over the same signature with&#x000a; * this model. If you that functionality, try using the util/sequence module instead.&#x000a; *&#x000a; * Technical comment:&#x000a; * An important constraint: elem must contain all atoms permitted by the scope.&#x000a; * This is to let the analyzer optimize the analysis by setting all fields of each&#x000a; * instantiation of Ord to predefined values: e.g. by setting &apos;last&apos; to the highest&#x000a; * atom of elem and by setting &apos;next&apos; to {&lt;T0,T1&gt;,&lt;T1,T2&gt;,...&lt;Tn-1,Tn&gt;}, where n is&#x000a; * the scope of elem. Without this constraint, it might not be true that Ord.last is&#x000a; * a subset of elem, and that the domain and range of Ord.next lie inside elem.&#x000a; *&#x000a; * author: Ilya Shlyakhter&#x000a; * revisions: Daniel jackson&#x000a; */&#x000a;&#x000a;private one sig Ord {&#x000a;   First: set elem,&#x000a;   Next: elem -&gt; elem&#x000a;} {&#x000a;   pred/totalOrder[elem,First,Next]&#x000a;}&#x000a;&#x000a;/** first */&#x000a;fun first: one elem { Ord.First }&#x000a;&#x000a;/** last */&#x000a;fun last: one elem { elem - (next.elem) }&#x000a;&#x000a;/** return a mapping from each element to its predecessor */&#x000a;fun prev : elem-&gt;elem { ~(Ord.Next) }&#x000a;&#x000a;/** return a mapping from each element to its successor */&#x000a;fun next : elem-&gt;elem { Ord.Next }&#x000a;&#x000a;/** return elements prior to e in the ordering */&#x000a;fun prevs [e: elem]: set elem { e.^(~(Ord.Next)) }&#x000a;&#x000a;/** return elements following e in the ordering */&#x000a;fun nexts [e: elem]: set elem { e.^(Ord.Next) }&#x000a;&#x000a;/** e1 is less than e2 in the ordering */&#x000a;pred lt [e1, e2: elem] { e1 in prevs[e2] }&#x000a;&#x000a;/** e1 is greater than e2 in the ordering */&#x000a;pred gt [e1, e2: elem] { e1 in nexts[e2] }&#x000a;&#x000a;/** e1 is less than or equal to e2 in the ordering */&#x000a;pred lte [e1, e2: elem] { e1=e2 || lt [e1,e2] }&#x000a;&#x000a;/** e1 is greater than or equal to e2 in the ordering */&#x000a;pred gte [e1, e2: elem] { e1=e2 || gt [e1,e2] }&#x000a;&#x000a;/** returns the larger of the two elements in the ordering */&#x000a;fun larger [e1, e2: elem]: elem { lt[e1,e2] =&gt; e2 else e1 }&#x000a;&#x000a;/** returns the smaller of the two elements in the ordering */&#x000a;fun smaller [e1, e2: elem]: elem { lt[e1,e2] =&gt; e1 else e2 }&#x000a;&#x000a;/**&#x000a; * returns the largest element in es&#x000a; * or the empty set if es is empty&#x000a; */&#x000a;fun max [es: set elem]: lone elem { es - es.^(~(Ord.Next)) }&#x000a;&#x000a;/**&#x000a; * returns the smallest element in es&#x000a; * or the empty set if es is empty&#x000a; */&#x000a;fun min [es: set elem]: lone elem { es - es.^(Ord.Next) }&#x000a;&#x000a;assert correct {&#x000a;  let mynext = Ord.Next |&#x000a;  let myprev = ~mynext | {&#x000a;     ( all b:elem | (lone b.next) &amp;&amp; (lone b.prev) &amp;&amp; (b !in b.^mynext) )&#x000a;     ( (no first.prev) &amp;&amp; (no last.next) )&#x000a;     ( all b:elem | (b!=first &amp;&amp; b!=last) =&gt; (one b.prev &amp;&amp; one b.next) )&#x000a;     ( !one elem =&gt; (one first &amp;&amp; one last &amp;&amp; first!=last &amp;&amp; one first.next &amp;&amp; one last.prev) )&#x000a;     ( one elem =&gt; (first=elem &amp;&amp; last=elem &amp;&amp; no myprev &amp;&amp; no mynext) )&#x000a;     ( myprev=~mynext )&#x000a;     ( elem = first.*mynext )&#x000a;     (all disj a,b:elem | a in b.^mynext or a in b.^myprev)&#x000a;     (no disj a,b:elem | a in b.^mynext and a in b.^myprev)&#x000a;     (all disj a,b,c:elem | (b in a.^mynext and c in b.^mynext) =&gt;(c in a.^mynext))&#x000a;     (all disj a,b,c:elem | (b in a.^myprev and c in b.^myprev) =&gt;(c in a.^myprev))&#x000a;  }&#x000a;}&#x000a;run {} for exactly 0 elem expect 0&#x000a;run {} for exactly 1 elem expect 1&#x000a;run {} for exactly 2 elem expect 1&#x000a;run {} for exactly 3 elem expect 1&#x000a;run {} for exactly 4 elem expect 1&#x000a;check correct for exactly 0 elem&#x000a;check correct for exactly 1 elem&#x000a;check correct for exactly 2 elem&#x000a;check correct for exactly 3 elem&#x000a;check correct for exactly 4 elem&#x000a;check correct for exactly 5 elem&#x000a;"/>

</alloy>
